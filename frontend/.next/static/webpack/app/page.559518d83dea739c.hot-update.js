"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/sui.ts":
/*!************************!*\
  !*** ./src/lib/sui.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SuiWrapper: function() { return /* binding */ SuiWrapper; }\n/* harmony export */ });\n/* harmony import */ var _mysten_sui_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mysten/sui/client */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/client/client.js\");\n/* harmony import */ var _mysten_sui_transactions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @mysten/sui/transactions */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/index.js\");\n/* harmony import */ var _config_network__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/network */ \"(app-pages-browser)/./src/config/network.ts\");\n\n\n\nlet instance = null;\nclass SuiWrapper {\n    static getInstance() {\n        if (!instance) {\n            instance = new SuiWrapper();\n        }\n        return instance;\n    }\n    configureTransaction(tx, sender) {\n        tx.setSender(sender);\n        return tx;\n    }\n    async createStakeTransaction(walletAddress, amount) {\n        const tx = this.configureTransaction(new _mysten_sui_transactions__WEBPACK_IMPORTED_MODULE_1__.TransactionBlock(), walletAddress);\n        try {\n            // Get all coins and calculate total balance\n            const coins = await this.provider.getCoins({\n                owner: walletAddress,\n                coinType: \"0x2::sui::SUI\"\n            });\n            if (coins.data.length === 0) {\n                throw new Error(\"No SUI coins found in wallet\");\n            }\n            const totalBalance = coins.data.reduce((acc, coin)=>acc + BigInt(coin.balance), BigInt(0));\n            const gasEstimate = BigInt(50000000); // Gas estimate in MIST\n            if (totalBalance < amount + gasEstimate) {\n                throw new Error(\"Insufficient balance. Need \".concat(amount + gasEstimate, \" MIST but only have \").concat(totalBalance, \" MIST (including gas)\"));\n            }\n            // Create a stake transaction\n            const [stakingCoin] = tx.splitCoins(tx.gas, [\n                tx.pure.u64(Number(amount))\n            ]);\n            tx.moveCall({\n                target: \"\".concat(this.PACKAGE_ID, \"::suisound::stake\"),\n                arguments: [\n                    tx.object(this.TREASURY_ID),\n                    stakingCoin,\n                    tx.pure.u64(Number(amount))\n                ]\n            });\n            return tx;\n        } catch (error) {\n            console.error(\"Error creating stake transaction:\", error);\n            throw error;\n        }\n    }\n    async getProducerAccess(walletAddress) {\n        try {\n            const stakeInfo = await this.getStakeInfo(walletAddress);\n            return stakeInfo.stakeAmount >= BigInt(1000000000);\n        } catch (error) {\n            return false;\n        }\n    }\n    async getStakeInfo(walletAddress) {\n        try {\n            var _treasuryObj_data, _stakeObj_data, _stakeContent_fields_value, _stakeContent_fields;\n            console.log(\"Fetching stake info for wallet:\", walletAddress);\n            const treasuryObj = await this.provider.getObject({\n                id: this.TREASURY_ID,\n                options: {\n                    showContent: true,\n                    showDisplay: true\n                }\n            });\n            console.log(\"Treasury object:\", JSON.stringify(treasuryObj, null, 2));\n            if (!((_treasuryObj_data = treasuryObj.data) === null || _treasuryObj_data === void 0 ? void 0 : _treasuryObj_data.content)) {\n                console.log(\"No treasury content found\");\n                return {\n                    stakeAmount: BigInt(0),\n                    isProStaker: false,\n                    rewards: BigInt(0)\n                };\n            }\n            const treasuryFields = treasuryObj.data.content.fields;\n            const stakesTableId = treasuryFields.stakes.fields.id.id;\n            console.log(\"Stakes table ID:\", stakesTableId);\n            const allStakes = await this.provider.getDynamicFields({\n                parentId: stakesTableId\n            });\n            console.log(\"All stakes:\", JSON.stringify(allStakes, null, 2));\n            const stake = allStakes.data.find((field)=>{\n                var _field_name;\n                const nameValue = (_field_name = field.name) === null || _field_name === void 0 ? void 0 : _field_name.value;\n                return (nameValue === null || nameValue === void 0 ? void 0 : nameValue.toLowerCase()) === walletAddress.toLowerCase();\n            });\n            console.log(\"Found stake for wallet:\", stake);\n            if (!stake) {\n                console.log(\"No stake found for wallet\");\n                return {\n                    stakeAmount: BigInt(0),\n                    isProStaker: false,\n                    rewards: BigInt(0)\n                };\n            }\n            // Get the stake object details\n            const stakeObj = await this.provider.getObject({\n                id: stake.objectId,\n                options: {\n                    showContent: true\n                }\n            });\n            console.log(\"Stake object:\", JSON.stringify(stakeObj, null, 2));\n            // Access the stake fields correctly through the dynamic field value\n            const stakeContent = (_stakeObj_data = stakeObj.data) === null || _stakeObj_data === void 0 ? void 0 : _stakeObj_data.content;\n            const stakeFields = stakeContent === null || stakeContent === void 0 ? void 0 : (_stakeContent_fields = stakeContent.fields) === null || _stakeContent_fields === void 0 ? void 0 : (_stakeContent_fields_value = _stakeContent_fields.value) === null || _stakeContent_fields_value === void 0 ? void 0 : _stakeContent_fields_value.fields;\n            console.log(\"Stake fields:\", stakeFields);\n            if (!stakeFields) {\n                return {\n                    stakeAmount: BigInt(0),\n                    isProStaker: false,\n                    rewards: BigInt(0)\n                };\n            }\n            return {\n                stakeAmount: BigInt(stakeFields.amount || 0),\n                isProStaker: Boolean(stakeFields.is_pro || false),\n                rewards: BigInt(0) // We'll calculate this based on time difference later\n            };\n        } catch (error) {\n            console.error(\"Error fetching stake info:\", error);\n            return {\n                stakeAmount: BigInt(0),\n                isProStaker: false,\n                rewards: BigInt(0)\n            };\n        }\n    }\n    async createUnstakeTransaction(walletAddress) {\n        const tx = this.configureTransaction(new _mysten_sui_transactions__WEBPACK_IMPORTED_MODULE_1__.TransactionBlock(), walletAddress);\n        try {\n            var _treasuryObj_data, _stakeContent_fields;\n            // First, get the user's stake info to find their stake object\n            console.log(\"Getting stake info for wallet:\", walletAddress);\n            const treasuryObj = await this.provider.getObject({\n                id: this.TREASURY_ID,\n                options: {\n                    showContent: true,\n                    showOwner: true\n                }\n            });\n            if (!((_treasuryObj_data = treasuryObj.data) === null || _treasuryObj_data === void 0 ? void 0 : _treasuryObj_data.content)) {\n                throw new Error(\"Treasury object not found\");\n            }\n            console.log(\"Treasury object owner:\", treasuryObj.data.owner);\n            const treasuryFields = treasuryObj.data.content.fields;\n            const stakesTableId = treasuryFields.stakes.fields.id.id;\n            console.log(\"Stakes table ID:\", stakesTableId);\n            const allStakes = await this.provider.getDynamicFields({\n                parentId: stakesTableId\n            });\n            const stake = allStakes.data.find((field)=>{\n                var _field_name;\n                const nameValue = (_field_name = field.name) === null || _field_name === void 0 ? void 0 : _field_name.value;\n                return (nameValue === null || nameValue === void 0 ? void 0 : nameValue.toLowerCase()) === walletAddress.toLowerCase();\n            });\n            if (!stake) {\n                throw new Error(\"No active stake found for this wallet\");\n            }\n            // Get the stake object details with owner info\n            const stakeObj = await this.provider.getObject({\n                id: stake.objectId,\n                options: {\n                    showContent: true,\n                    showOwner: true\n                }\n            });\n            if (!stakeObj.data) {\n                throw new Error(\"Could not fetch stake object details\");\n            }\n            console.log(\"Stake object:\", JSON.stringify(stakeObj.data, null, 2));\n            console.log(\"Stake owner:\", stakeObj.data.owner);\n            // Get the stake value fields\n            const stakeContent = stakeObj.data.content;\n            if (!(stakeContent === null || stakeContent === void 0 ? void 0 : (_stakeContent_fields = stakeContent.fields) === null || _stakeContent_fields === void 0 ? void 0 : _stakeContent_fields.value)) {\n                throw new Error(\"Could not find stake value\");\n            }\n            // Get the dynamic field ID which contains the stake\n            const stakeId = stakeContent.fields.id.id;\n            if (!stakeId) {\n                throw new Error(\"Could not find stake ID\");\n            }\n            console.log(\"Using stake ID:\", stakeId);\n            // Set a higher gas budget for the unstake operation\n            tx.setGasBudget(100000000);\n            // Create the unstake transaction with the stake table ID and stake ID\n            tx.moveCall({\n                target: \"\".concat(this.PACKAGE_ID, \"::suisound::unstake\"),\n                arguments: [\n                    tx.object(this.TREASURY_ID),\n                    tx.object(stakesTableId),\n                    tx.pure.address(walletAddress) // Pass the wallet address\n                ],\n                typeArguments: []\n            });\n            return tx;\n        } catch (error) {\n            console.error(\"Error creating unstake transaction:\", error);\n            if (error instanceof Error) {\n                console.error(\"Error details:\", {\n                    message: error.message,\n                    stack: error.stack\n                });\n            }\n            throw error;\n        }\n    }\n    async createClaimRewardsTransaction(walletAddress) {\n        const tx = this.configureTransaction(new _mysten_sui_transactions__WEBPACK_IMPORTED_MODULE_1__.TransactionBlock(), walletAddress);\n        try {\n            tx.moveCall({\n                target: \"\".concat(this.PACKAGE_ID, \"::suisound::claim_rewards\"),\n                arguments: [\n                    tx.object(this.TREASURY_ID)\n                ]\n            });\n            return tx;\n        } catch (error) {\n            console.error(\"Error creating claim rewards transaction:\", error);\n            throw error;\n        }\n    }\n    constructor(){\n        this.provider = new _mysten_sui_client__WEBPACK_IMPORTED_MODULE_2__.SuiClient({\n            url: _config_network__WEBPACK_IMPORTED_MODULE_0__.NETWORK_URLS[_config_network__WEBPACK_IMPORTED_MODULE_0__.NETWORK]\n        });\n        this.PACKAGE_ID = _config_network__WEBPACK_IMPORTED_MODULE_0__.PACKAGE_ID;\n        this.TREASURY_ID = _config_network__WEBPACK_IMPORTED_MODULE_0__.TREASURY_ID;\n        console.log(\"Network:\", _config_network__WEBPACK_IMPORTED_MODULE_0__.NETWORK);\n        console.log(\"Package ID:\", this.PACKAGE_ID);\n        console.log(\"Treasury ID:\", this.TREASURY_ID);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/sui.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/Arguments.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@mysten/sui/dist/esm/transactions/Arguments.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Arguments: function() { return /* binding */ Arguments; }\n/* harmony export */ });\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./object.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/object.js\");\n/* harmony import */ var _pure_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pure.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/pure.js\");\n\n\nconst Arguments = {\n    pure: (0,_pure_js__WEBPACK_IMPORTED_MODULE_0__.createPure)((value)=>(tx)=>tx.pure(value)),\n    object: (0,_object_js__WEBPACK_IMPORTED_MODULE_1__.createObjectMethods)((value)=>(tx)=>tx.object(value)),\n    sharedObjectRef: function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return (tx)=>tx.sharedObjectRef(...args);\n    },\n    objectRef: function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return (tx)=>tx.objectRef(...args);\n    },\n    receivingRef: function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return (tx)=>tx.receivingRef(...args);\n    }\n};\n //# sourceMappingURL=Arguments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbXlzdGVuL3N1aS9kaXN0L2VzbS90cmFuc2FjdGlvbnMvQXJndW1lbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRDtBQUNYO0FBQ3ZDLE1BQU1FLFlBQVk7SUFDaEJDLE1BQU1GLG9EQUFVQSxDQUFDLENBQUNHLFFBQVUsQ0FBQ0MsS0FBT0EsR0FBR0YsSUFBSSxDQUFDQztJQUM1Q0UsUUFBUU4sK0RBQW1CQSxDQUFDLENBQUNJLFFBQVUsQ0FBQ0MsS0FBT0EsR0FBR0MsTUFBTSxDQUFDRjtJQUN6REcsaUJBQWlCO3lDQUFJQztZQUFBQTs7ZUFBUyxDQUFDSCxLQUFPQSxHQUFHRSxlQUFlLElBQUlDOztJQUM1REMsV0FBVzt5Q0FBSUQ7WUFBQUE7O2VBQVMsQ0FBQ0gsS0FBT0EsR0FBR0ksU0FBUyxJQUFJRDs7SUFDaERFLGNBQWM7eUNBQUlGO1lBQUFBOztlQUFTLENBQUNILEtBQU9BLEdBQUdLLFlBQVksSUFBSUY7O0FBQ3hEO0FBR0UsQ0FDRixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpL2Rpc3QvZXNtL3RyYW5zYWN0aW9ucy9Bcmd1bWVudHMuanM/ZWRjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVPYmplY3RNZXRob2RzIH0gZnJvbSBcIi4vb2JqZWN0LmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVQdXJlIH0gZnJvbSBcIi4vcHVyZS5qc1wiO1xuY29uc3QgQXJndW1lbnRzID0ge1xuICBwdXJlOiBjcmVhdGVQdXJlKCh2YWx1ZSkgPT4gKHR4KSA9PiB0eC5wdXJlKHZhbHVlKSksXG4gIG9iamVjdDogY3JlYXRlT2JqZWN0TWV0aG9kcygodmFsdWUpID0+ICh0eCkgPT4gdHgub2JqZWN0KHZhbHVlKSksXG4gIHNoYXJlZE9iamVjdFJlZjogKC4uLmFyZ3MpID0+ICh0eCkgPT4gdHguc2hhcmVkT2JqZWN0UmVmKC4uLmFyZ3MpLFxuICBvYmplY3RSZWY6ICguLi5hcmdzKSA9PiAodHgpID0+IHR4Lm9iamVjdFJlZiguLi5hcmdzKSxcbiAgcmVjZWl2aW5nUmVmOiAoLi4uYXJncykgPT4gKHR4KSA9PiB0eC5yZWNlaXZpbmdSZWYoLi4uYXJncylcbn07XG5leHBvcnQge1xuICBBcmd1bWVudHNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bcmd1bWVudHMuanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlT2JqZWN0TWV0aG9kcyIsImNyZWF0ZVB1cmUiLCJBcmd1bWVudHMiLCJwdXJlIiwidmFsdWUiLCJ0eCIsIm9iamVjdCIsInNoYXJlZE9iamVjdFJlZiIsImFyZ3MiLCJvYmplY3RSZWYiLCJyZWNlaXZpbmdSZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/Arguments.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/ObjectCache.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@mysten/sui/dist/esm/transactions/ObjectCache.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncCache: function() { return /* binding */ AsyncCache; },\n/* harmony export */   InMemoryCache: function() { return /* binding */ InMemoryCache; },\n/* harmony export */   ObjectCache: function() { return /* binding */ ObjectCache; }\n/* harmony export */ });\n/* harmony import */ var _utils_sui_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/sui-types.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/utils/sui-types.js\");\nvar __typeError = (msg)=>{\n    throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg)=>member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter)=>(__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value)=>member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter)=>(__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _caches, _cache, _onEffects;\n\nclass AsyncCache {\n    async getObject(id) {\n        const [owned, shared] = await Promise.all([\n            this.get(\"OwnedObject\", id),\n            this.get(\"SharedOrImmutableObject\", id)\n        ]);\n        var _ref;\n        return (_ref = owned !== null && owned !== void 0 ? owned : shared) !== null && _ref !== void 0 ? _ref : null;\n    }\n    async getObjects(ids) {\n        return Promise.all([\n            ...ids.map((id)=>this.getObject(id))\n        ]);\n    }\n    async addObject(object) {\n        if (object.owner) {\n            await this.set(\"OwnedObject\", object.objectId, object);\n        } else {\n            await this.set(\"SharedOrImmutableObject\", object.objectId, object);\n        }\n        return object;\n    }\n    async addObjects(objects) {\n        await Promise.all(objects.map(async (object)=>this.addObject(object)));\n    }\n    async deleteObject(id) {\n        await Promise.all([\n            this.delete(\"OwnedObject\", id),\n            this.delete(\"SharedOrImmutableObject\", id)\n        ]);\n    }\n    async deleteObjects(ids) {\n        await Promise.all(ids.map((id)=>this.deleteObject(id)));\n    }\n    async getMoveFunctionDefinition(ref) {\n        const functionName = \"\".concat((0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_0__.normalizeSuiAddress)(ref.package), \"::\").concat(ref.module, \"::\").concat(ref.function);\n        return this.get(\"MoveFunction\", functionName);\n    }\n    async addMoveFunctionDefinition(functionEntry) {\n        const pkg = (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_0__.normalizeSuiAddress)(functionEntry.package);\n        const functionName = \"\".concat(pkg, \"::\").concat(functionEntry.module, \"::\").concat(functionEntry.function);\n        const entry = {\n            ...functionEntry,\n            package: pkg\n        };\n        await this.set(\"MoveFunction\", functionName, entry);\n        return entry;\n    }\n    async deleteMoveFunctionDefinition(ref) {\n        const functionName = \"\".concat((0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_0__.normalizeSuiAddress)(ref.package), \"::\").concat(ref.module, \"::\").concat(ref.function);\n        await this.delete(\"MoveFunction\", functionName);\n    }\n    async getCustom(key) {\n        return this.get(\"Custom\", key);\n    }\n    async setCustom(key, value) {\n        return this.set(\"Custom\", key, value);\n    }\n    async deleteCustom(key) {\n        return this.delete(\"Custom\", key);\n    }\n}\nclass InMemoryCache extends AsyncCache {\n    async get(type, key) {\n        var __privateGet_type_get;\n        return (__privateGet_type_get = __privateGet(this, _caches)[type].get(key)) !== null && __privateGet_type_get !== void 0 ? __privateGet_type_get : null;\n    }\n    async set(type, key, value) {\n        __privateGet(this, _caches)[type].set(key, value);\n    }\n    async delete(type, key) {\n        __privateGet(this, _caches)[type].delete(key);\n    }\n    async clear(type) {\n        if (type) {\n            __privateGet(this, _caches)[type].clear();\n        } else {\n            for (const cache of Object.values(__privateGet(this, _caches))){\n                cache.clear();\n            }\n        }\n    }\n    constructor(){\n        super(...arguments);\n        __privateAdd(this, _caches, {\n            OwnedObject: /* @__PURE__ */ new Map(),\n            SharedOrImmutableObject: /* @__PURE__ */ new Map(),\n            MoveFunction: /* @__PURE__ */ new Map(),\n            Custom: /* @__PURE__ */ new Map()\n        });\n    }\n}\n_caches = new WeakMap();\nclass ObjectCache {\n    asPlugin() {\n        return async (transactionData, _options, next)=>{\n            const unresolvedObjects = transactionData.inputs.filter((input)=>input.UnresolvedObject).map((input)=>input.UnresolvedObject.objectId);\n            const cached = (await __privateGet(this, _cache).getObjects(unresolvedObjects)).filter((obj)=>obj !== null);\n            const byId = new Map(cached.map((obj)=>[\n                    obj.objectId,\n                    obj\n                ]));\n            for (const input of transactionData.inputs){\n                if (!input.UnresolvedObject) {\n                    continue;\n                }\n                const cached2 = byId.get(input.UnresolvedObject.objectId);\n                if (!cached2) {\n                    continue;\n                }\n                if (cached2.initialSharedVersion && !input.UnresolvedObject.initialSharedVersion) {\n                    input.UnresolvedObject.initialSharedVersion = cached2.initialSharedVersion;\n                } else {\n                    if (cached2.version && !input.UnresolvedObject.version) {\n                        input.UnresolvedObject.version = cached2.version;\n                    }\n                    if (cached2.digest && !input.UnresolvedObject.digest) {\n                        input.UnresolvedObject.digest = cached2.digest;\n                    }\n                }\n            }\n            await Promise.all(transactionData.commands.map(async (commands)=>{\n                if (commands.MoveCall) {\n                    const def = await this.getMoveFunctionDefinition({\n                        package: commands.MoveCall.package,\n                        module: commands.MoveCall.module,\n                        function: commands.MoveCall.function\n                    });\n                    if (def) {\n                        commands.MoveCall._argumentTypes = def.parameters;\n                    }\n                }\n            }));\n            await next();\n            await Promise.all(transactionData.commands.map(async (commands)=>{\n                var _commands_MoveCall;\n                if ((_commands_MoveCall = commands.MoveCall) === null || _commands_MoveCall === void 0 ? void 0 : _commands_MoveCall._argumentTypes) {\n                    await __privateGet(this, _cache).addMoveFunctionDefinition({\n                        package: commands.MoveCall.package,\n                        module: commands.MoveCall.module,\n                        function: commands.MoveCall.function,\n                        parameters: commands.MoveCall._argumentTypes\n                    });\n                }\n            }));\n        };\n    }\n    async clear() {\n        await __privateGet(this, _cache).clear();\n    }\n    async getMoveFunctionDefinition(ref) {\n        return __privateGet(this, _cache).getMoveFunctionDefinition(ref);\n    }\n    async getObjects(ids) {\n        return __privateGet(this, _cache).getObjects(ids);\n    }\n    async deleteObjects(ids) {\n        return __privateGet(this, _cache).deleteObjects(ids);\n    }\n    async clearOwnedObjects() {\n        await __privateGet(this, _cache).clear(\"OwnedObject\");\n    }\n    async clearCustom() {\n        await __privateGet(this, _cache).clear(\"Custom\");\n    }\n    async getCustom(key) {\n        return __privateGet(this, _cache).getCustom(key);\n    }\n    async setCustom(key, value) {\n        return __privateGet(this, _cache).setCustom(key, value);\n    }\n    async deleteCustom(key) {\n        return __privateGet(this, _cache).deleteCustom(key);\n    }\n    async applyEffects(effects) {\n        var _a;\n        if (!effects.V2) {\n            throw new Error(\"Unsupported transaction effects version \".concat(effects.$kind));\n        }\n        const { lamportVersion, changedObjects } = effects.V2;\n        const deletedIds = [];\n        const addedObjects = [];\n        changedObjects.forEach((param)=>{\n            let [id, change] = param;\n            if (change.outputState.NotExist) {\n                deletedIds.push(id);\n            } else if (change.outputState.ObjectWrite) {\n                var _owner_Shared;\n                const [digest, owner] = change.outputState.ObjectWrite;\n                var _owner_AddressOwner, _ref, _owner_Shared_initialSharedVersion;\n                addedObjects.push({\n                    objectId: id,\n                    digest,\n                    version: lamportVersion,\n                    owner: (_ref = (_owner_AddressOwner = owner.AddressOwner) !== null && _owner_AddressOwner !== void 0 ? _owner_AddressOwner : owner.ObjectOwner) !== null && _ref !== void 0 ? _ref : null,\n                    initialSharedVersion: (_owner_Shared_initialSharedVersion = (_owner_Shared = owner.Shared) === null || _owner_Shared === void 0 ? void 0 : _owner_Shared.initialSharedVersion) !== null && _owner_Shared_initialSharedVersion !== void 0 ? _owner_Shared_initialSharedVersion : null\n                });\n            }\n        });\n        await Promise.all([\n            __privateGet(this, _cache).addObjects(addedObjects),\n            __privateGet(this, _cache).deleteObjects(deletedIds),\n            (_a = __privateGet(this, _onEffects)) == null ? void 0 : _a.call(this, effects)\n        ]);\n    }\n    constructor({ cache = new InMemoryCache(), onEffects }){\n        __privateAdd(this, _cache);\n        __privateAdd(this, _onEffects);\n        __privateSet(this, _cache, cache);\n        __privateSet(this, _onEffects, onEffects);\n    }\n}\n_cache = new WeakMap();\n_onEffects = new WeakMap();\n //# sourceMappingURL=ObjectCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/ObjectCache.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/caching.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@mysten/sui/dist/esm/transactions/executor/caching.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CachingTransactionExecutor: function() { return /* binding */ CachingTransactionExecutor; }\n/* harmony export */ });\n/* harmony import */ var _bcs_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../bcs/index.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/bcs/index.js\");\n/* harmony import */ var _ObjectCache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ObjectCache.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/ObjectCache.js\");\n/* harmony import */ var _Transaction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Transaction.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/Transaction.js\");\nvar __typeError = (msg)=>{\n    throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg)=>member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter)=>(__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value)=>member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter)=>(__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _client, _lastDigest;\n\n\n\nclass CachingTransactionExecutor {\n    /**\n   * Clears all Owned objects\n   * Immutable objects, Shared objects, and Move function definitions will be preserved\n   */ async reset() {\n        await Promise.all([\n            this.cache.clearOwnedObjects(),\n            this.cache.clearCustom(),\n            this.waitForLastTransaction()\n        ]);\n    }\n    async buildTransaction(param) {\n        let { transaction, ...options } = param;\n        transaction.addBuildPlugin(this.cache.asPlugin());\n        return transaction.build({\n            client: __privateGet(this, _client),\n            ...options\n        });\n    }\n    async executeTransaction(param) {\n        let { transaction, options, ...input } = param;\n        const bytes = (0,_Transaction_js__WEBPACK_IMPORTED_MODULE_0__.isTransaction)(transaction) ? await this.buildTransaction({\n            transaction\n        }) : transaction;\n        const results = await __privateGet(this, _client).executeTransactionBlock({\n            ...input,\n            transactionBlock: bytes,\n            options: {\n                ...options,\n                showRawEffects: true\n            }\n        });\n        if (results.rawEffects) {\n            const effects = _bcs_index_js__WEBPACK_IMPORTED_MODULE_1__.bcs.TransactionEffects.parse(Uint8Array.from(results.rawEffects));\n            await this.applyEffects(effects);\n        }\n        return results;\n    }\n    async signAndExecuteTransaction(param) {\n        let { options, transaction, ...input } = param;\n        transaction.setSenderIfNotSet(input.signer.toSuiAddress());\n        const bytes = await this.buildTransaction({\n            transaction\n        });\n        const { signature } = await input.signer.signTransaction(bytes);\n        const results = await this.executeTransaction({\n            transaction: bytes,\n            signature,\n            options\n        });\n        return results;\n    }\n    async applyEffects(effects) {\n        var _effects_V2;\n        var _effects_V2_transactionDigest;\n        __privateSet(this, _lastDigest, (_effects_V2_transactionDigest = (_effects_V2 = effects.V2) === null || _effects_V2 === void 0 ? void 0 : _effects_V2.transactionDigest) !== null && _effects_V2_transactionDigest !== void 0 ? _effects_V2_transactionDigest : null);\n        await this.cache.applyEffects(effects);\n    }\n    async waitForLastTransaction() {\n        if (__privateGet(this, _lastDigest)) {\n            await __privateGet(this, _client).waitForTransaction({\n                digest: __privateGet(this, _lastDigest)\n            });\n            __privateSet(this, _lastDigest, null);\n        }\n    }\n    constructor({ client, ...options }){\n        __privateAdd(this, _client);\n        __privateAdd(this, _lastDigest, null);\n        __privateSet(this, _client, client);\n        this.cache = new _ObjectCache_js__WEBPACK_IMPORTED_MODULE_2__.ObjectCache(options);\n    }\n}\n_client = new WeakMap();\n_lastDigest = new WeakMap();\n //# sourceMappingURL=caching.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/caching.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/parallel.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mysten/sui/dist/esm/transactions/executor/parallel.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParallelTransactionExecutor: function() { return /* binding */ ParallelTransactionExecutor; }\n/* harmony export */ });\n/* harmony import */ var _mysten_bcs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mysten/bcs */ \"(app-pages-browser)/./node_modules/@mysten/bcs/dist/esm/b64.js\");\n/* harmony import */ var _bcs_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../bcs/index.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/bcs/index.js\");\n/* harmony import */ var _Transaction_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Transaction.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/Transaction.js\");\n/* harmony import */ var _TransactionData_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../TransactionData.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/TransactionData.js\");\n/* harmony import */ var _caching_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./caching.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/caching.js\");\n/* harmony import */ var _queue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queue.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/queue.js\");\n/* harmony import */ var _serial_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./serial.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/serial.js\");\nvar __typeError = (msg)=>{\n    throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg)=>member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter)=>(__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value1)=>member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value1);\nvar __privateSet = (obj, member, value1, setter)=>(__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value1) : member.set(obj, value1), value1);\nvar __privateMethod = (obj, member, method)=>(__accessCheck(obj, member, \"access private method\"), method);\nvar __privateWrapper = (obj, member, setter, getter)=>({\n        set _ (value){\n            __privateSet(obj, member, value, setter);\n        },\n        get _ () {\n            return __privateGet(obj, member, getter);\n        }\n    });\nvar _signer, _client, _coinBatchSize, _initialCoinBalance, _minimumCoinBalance, _epochBoundaryWindow, _defaultGasBudget, _maxPoolSize, _sourceCoins, _coinPool, _cache, _objectIdQueues, _buildQueue, _executeQueue, _lastDigest, _cacheLock, _pendingTransactions, _gasPrice, _ParallelTransactionExecutor_instances, getUsedObjects_fn, execute_fn, updateCache_fn, waitForLastDigest_fn, getGasCoin_fn, getGasPrice_fn, refillCoinPool_fn;\n\n\n\n\n\n\n\nconst PARALLEL_EXECUTOR_DEFAULTS = {\n    coinBatchSize: 20,\n    initialCoinBalance: 200000000n,\n    minimumCoinBalance: 50000000n,\n    maxPoolSize: 50,\n    epochBoundaryWindow: 1e3\n};\nclass ParallelTransactionExecutor {\n    resetCache() {\n        __privateSet(this, _gasPrice, null);\n        return __privateMethod(this, _ParallelTransactionExecutor_instances, updateCache_fn).call(this, ()=>__privateGet(this, _cache).reset());\n    }\n    async waitForLastTransaction() {\n        await __privateMethod(this, _ParallelTransactionExecutor_instances, updateCache_fn).call(this, ()=>__privateMethod(this, _ParallelTransactionExecutor_instances, waitForLastDigest_fn).call(this));\n    }\n    async executeTransaction(transaction, options) {\n        const { promise, resolve, reject } = promiseWithResolvers();\n        const usedObjects = await __privateMethod(this, _ParallelTransactionExecutor_instances, getUsedObjects_fn).call(this, transaction);\n        const execute = ()=>{\n            __privateGet(this, _executeQueue).runTask(()=>{\n                const promise2 = __privateMethod(this, _ParallelTransactionExecutor_instances, execute_fn).call(this, transaction, usedObjects, options);\n                return promise2.then(resolve, reject);\n            });\n        };\n        const conflicts = /* @__PURE__ */ new Set();\n        usedObjects.forEach((objectId)=>{\n            const queue = __privateGet(this, _objectIdQueues).get(objectId);\n            if (queue) {\n                conflicts.add(objectId);\n                __privateGet(this, _objectIdQueues).get(objectId).push(()=>{\n                    conflicts.delete(objectId);\n                    if (conflicts.size === 0) {\n                        execute();\n                    }\n                });\n            } else {\n                __privateGet(this, _objectIdQueues).set(objectId, []);\n            }\n        });\n        if (conflicts.size === 0) {\n            execute();\n        }\n        return promise;\n    }\n    constructor(options){\n        __privateAdd(this, _ParallelTransactionExecutor_instances);\n        __privateAdd(this, _signer);\n        __privateAdd(this, _client);\n        __privateAdd(this, _coinBatchSize);\n        __privateAdd(this, _initialCoinBalance);\n        __privateAdd(this, _minimumCoinBalance);\n        __privateAdd(this, _epochBoundaryWindow);\n        __privateAdd(this, _defaultGasBudget);\n        __privateAdd(this, _maxPoolSize);\n        __privateAdd(this, _sourceCoins);\n        __privateAdd(this, _coinPool, []);\n        __privateAdd(this, _cache);\n        __privateAdd(this, _objectIdQueues, /* @__PURE__ */ new Map());\n        __privateAdd(this, _buildQueue, new _queue_js__WEBPACK_IMPORTED_MODULE_0__.SerialQueue());\n        __privateAdd(this, _executeQueue);\n        __privateAdd(this, _lastDigest, null);\n        __privateAdd(this, _cacheLock, null);\n        __privateAdd(this, _pendingTransactions, 0);\n        __privateAdd(this, _gasPrice, null);\n        __privateSet(this, _signer, options.signer);\n        __privateSet(this, _client, options.client);\n        var _options_coinBatchSize;\n        __privateSet(this, _coinBatchSize, (_options_coinBatchSize = options.coinBatchSize) !== null && _options_coinBatchSize !== void 0 ? _options_coinBatchSize : PARALLEL_EXECUTOR_DEFAULTS.coinBatchSize);\n        var _options_initialCoinBalance;\n        __privateSet(this, _initialCoinBalance, (_options_initialCoinBalance = options.initialCoinBalance) !== null && _options_initialCoinBalance !== void 0 ? _options_initialCoinBalance : PARALLEL_EXECUTOR_DEFAULTS.initialCoinBalance);\n        var _options_minimumCoinBalance;\n        __privateSet(this, _minimumCoinBalance, (_options_minimumCoinBalance = options.minimumCoinBalance) !== null && _options_minimumCoinBalance !== void 0 ? _options_minimumCoinBalance : PARALLEL_EXECUTOR_DEFAULTS.minimumCoinBalance);\n        var _options_defaultGasBudget;\n        __privateSet(this, _defaultGasBudget, (_options_defaultGasBudget = options.defaultGasBudget) !== null && _options_defaultGasBudget !== void 0 ? _options_defaultGasBudget : __privateGet(this, _minimumCoinBalance));\n        var _options_epochBoundaryWindow;\n        __privateSet(this, _epochBoundaryWindow, (_options_epochBoundaryWindow = options.epochBoundaryWindow) !== null && _options_epochBoundaryWindow !== void 0 ? _options_epochBoundaryWindow : PARALLEL_EXECUTOR_DEFAULTS.epochBoundaryWindow);\n        var _options_maxPoolSize;\n        __privateSet(this, _maxPoolSize, (_options_maxPoolSize = options.maxPoolSize) !== null && _options_maxPoolSize !== void 0 ? _options_maxPoolSize : PARALLEL_EXECUTOR_DEFAULTS.maxPoolSize);\n        __privateSet(this, _cache, new _caching_js__WEBPACK_IMPORTED_MODULE_1__.CachingTransactionExecutor({\n            client: options.client,\n            cache: options.cache\n        }));\n        __privateSet(this, _executeQueue, new _queue_js__WEBPACK_IMPORTED_MODULE_0__.ParallelQueue(__privateGet(this, _maxPoolSize)));\n        __privateSet(this, _sourceCoins, options.sourceCoins ? new Map(options.sourceCoins.map((id)=>[\n                id,\n                null\n            ])) : null);\n    }\n}\n_signer = new WeakMap();\n_client = new WeakMap();\n_coinBatchSize = new WeakMap();\n_initialCoinBalance = new WeakMap();\n_minimumCoinBalance = new WeakMap();\n_epochBoundaryWindow = new WeakMap();\n_defaultGasBudget = new WeakMap();\n_maxPoolSize = new WeakMap();\n_sourceCoins = new WeakMap();\n_coinPool = new WeakMap();\n_cache = new WeakMap();\n_objectIdQueues = new WeakMap();\n_buildQueue = new WeakMap();\n_executeQueue = new WeakMap();\n_lastDigest = new WeakMap();\n_cacheLock = new WeakMap();\n_pendingTransactions = new WeakMap();\n_gasPrice = new WeakMap();\n_ParallelTransactionExecutor_instances = new WeakSet();\ngetUsedObjects_fn = async function(transaction) {\n    const usedObjects = /* @__PURE__ */ new Set();\n    let serialized = false;\n    transaction.addSerializationPlugin(async (blockData, _options, next)=>{\n        await next();\n        if (serialized) {\n            return;\n        }\n        serialized = true;\n        blockData.inputs.forEach((input)=>{\n            var _input_Object_ImmOrOwnedObject, _input_Object, _input_Object_Receiving, _input_Object1, _input_UnresolvedObject;\n            if ((_input_Object = input.Object) === null || _input_Object === void 0 ? void 0 : (_input_Object_ImmOrOwnedObject = _input_Object.ImmOrOwnedObject) === null || _input_Object_ImmOrOwnedObject === void 0 ? void 0 : _input_Object_ImmOrOwnedObject.objectId) {\n                usedObjects.add(input.Object.ImmOrOwnedObject.objectId);\n            } else if ((_input_Object1 = input.Object) === null || _input_Object1 === void 0 ? void 0 : (_input_Object_Receiving = _input_Object1.Receiving) === null || _input_Object_Receiving === void 0 ? void 0 : _input_Object_Receiving.objectId) {\n                usedObjects.add(input.Object.Receiving.objectId);\n            } else if (((_input_UnresolvedObject = input.UnresolvedObject) === null || _input_UnresolvedObject === void 0 ? void 0 : _input_UnresolvedObject.objectId) && !input.UnresolvedObject.initialSharedVersion) {\n                usedObjects.add(input.UnresolvedObject.objectId);\n            }\n        });\n    });\n    await transaction.prepareForSerialization({\n        client: __privateGet(this, _client)\n    });\n    return usedObjects;\n};\nexecute_fn = async function(transaction, usedObjects, options) {\n    let gasCoin;\n    try {\n        var _effects_V2;\n        transaction.setSenderIfNotSet(__privateGet(this, _signer).toSuiAddress());\n        await __privateGet(this, _buildQueue).runTask(async ()=>{\n            const data = transaction.getData();\n            if (!data.gasData.price) {\n                transaction.setGasPrice(await __privateMethod(this, _ParallelTransactionExecutor_instances, getGasPrice_fn).call(this));\n            }\n            transaction.setGasBudgetIfNotSet(__privateGet(this, _defaultGasBudget));\n            await __privateMethod(this, _ParallelTransactionExecutor_instances, updateCache_fn).call(this);\n            gasCoin = await __privateMethod(this, _ParallelTransactionExecutor_instances, getGasCoin_fn).call(this);\n            __privateWrapper(this, _pendingTransactions)._++;\n            transaction.setGasPayment([\n                {\n                    objectId: gasCoin.id,\n                    version: gasCoin.version,\n                    digest: gasCoin.digest\n                }\n            ]);\n            await __privateGet(this, _cache).buildTransaction({\n                transaction,\n                onlyTransactionKind: true\n            });\n        });\n        const bytes = await transaction.build({\n            client: __privateGet(this, _client)\n        });\n        const { signature } = await __privateGet(this, _signer).signTransaction(bytes);\n        const results = await __privateGet(this, _cache).executeTransaction({\n            transaction: bytes,\n            signature,\n            options: {\n                ...options,\n                showEffects: true\n            }\n        });\n        const effectsBytes = Uint8Array.from(results.rawEffects);\n        const effects = _bcs_index_js__WEBPACK_IMPORTED_MODULE_2__.bcs.TransactionEffects.parse(effectsBytes);\n        const gasResult = (0,_serial_js__WEBPACK_IMPORTED_MODULE_3__.getGasCoinFromEffects)(effects);\n        const gasUsed = (_effects_V2 = effects.V2) === null || _effects_V2 === void 0 ? void 0 : _effects_V2.gasUsed;\n        if (gasCoin && gasUsed && gasResult.owner === __privateGet(this, _signer).toSuiAddress()) {\n            const totalUsed = BigInt(gasUsed.computationCost) + BigInt(gasUsed.storageCost) + BigInt(gasUsed.storageCost) - BigInt(gasUsed.storageRebate);\n            let usesGasCoin = false;\n            new _TransactionData_js__WEBPACK_IMPORTED_MODULE_4__.TransactionDataBuilder(transaction.getData()).mapArguments((arg)=>{\n                if (arg.$kind === \"GasCoin\") {\n                    usesGasCoin = true;\n                }\n                return arg;\n            });\n            if (!usesGasCoin && gasCoin.balance >= __privateGet(this, _minimumCoinBalance)) {\n                __privateGet(this, _coinPool).push({\n                    id: gasResult.ref.objectId,\n                    version: gasResult.ref.version,\n                    digest: gasResult.ref.digest,\n                    balance: gasCoin.balance - totalUsed\n                });\n            } else {\n                if (!__privateGet(this, _sourceCoins)) {\n                    __privateSet(this, _sourceCoins, /* @__PURE__ */ new Map());\n                }\n                __privateGet(this, _sourceCoins).set(gasResult.ref.objectId, gasResult.ref);\n            }\n        }\n        __privateSet(this, _lastDigest, results.digest);\n        return {\n            digest: results.digest,\n            effects: (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_5__.toBase64)(effectsBytes),\n            data: results\n        };\n    } catch (error) {\n        if (gasCoin) {\n            if (!__privateGet(this, _sourceCoins)) {\n                __privateSet(this, _sourceCoins, /* @__PURE__ */ new Map());\n            }\n            __privateGet(this, _sourceCoins).set(gasCoin.id, null);\n        }\n        await __privateMethod(this, _ParallelTransactionExecutor_instances, updateCache_fn).call(this, async ()=>{\n            await Promise.all([\n                __privateGet(this, _cache).cache.deleteObjects([\n                    ...usedObjects\n                ]),\n                __privateMethod(this, _ParallelTransactionExecutor_instances, waitForLastDigest_fn).call(this)\n            ]);\n        });\n        throw error;\n    } finally{\n        usedObjects.forEach((objectId)=>{\n            const queue = __privateGet(this, _objectIdQueues).get(objectId);\n            if (queue && queue.length > 0) {\n                queue.shift()();\n            } else if (queue) {\n                __privateGet(this, _objectIdQueues).delete(objectId);\n            }\n        });\n        __privateWrapper(this, _pendingTransactions)._--;\n    }\n};\nupdateCache_fn = async function(fn) {\n    if (__privateGet(this, _cacheLock)) {\n        await __privateGet(this, _cacheLock);\n    }\n    var _fn_then;\n    __privateSet(this, _cacheLock, (_fn_then = fn === null || fn === void 0 ? void 0 : fn().then(()=>{\n        __privateSet(this, _cacheLock, null);\n    }, ()=>{})) !== null && _fn_then !== void 0 ? _fn_then : null);\n};\nwaitForLastDigest_fn = async function() {\n    const digest = __privateGet(this, _lastDigest);\n    if (digest) {\n        __privateSet(this, _lastDigest, null);\n        await __privateGet(this, _client).waitForTransaction({\n            digest\n        });\n    }\n};\ngetGasCoin_fn = async function() {\n    if (__privateGet(this, _coinPool).length === 0 && __privateGet(this, _pendingTransactions) <= __privateGet(this, _maxPoolSize)) {\n        await __privateMethod(this, _ParallelTransactionExecutor_instances, refillCoinPool_fn).call(this);\n    }\n    if (__privateGet(this, _coinPool).length === 0) {\n        throw new Error(\"No coins available\");\n    }\n    const coin = __privateGet(this, _coinPool).shift();\n    return coin;\n};\ngetGasPrice_fn = async function() {\n    const remaining = __privateGet(this, _gasPrice) ? __privateGet(this, _gasPrice).expiration - __privateGet(this, _epochBoundaryWindow) - Date.now() : 0;\n    if (remaining > 0) {\n        return __privateGet(this, _gasPrice).price;\n    }\n    if (__privateGet(this, _gasPrice)) {\n        const timeToNextEpoch = Math.max(__privateGet(this, _gasPrice).expiration + __privateGet(this, _epochBoundaryWindow) - Date.now(), 1e3);\n        await new Promise((resolve)=>setTimeout(resolve, timeToNextEpoch));\n    }\n    const state = await __privateGet(this, _client).getLatestSuiSystemState();\n    __privateSet(this, _gasPrice, {\n        price: BigInt(state.referenceGasPrice),\n        expiration: Number.parseInt(state.epochStartTimestampMs, 10) + Number.parseInt(state.epochDurationMs, 10)\n    });\n    return __privateMethod(this, _ParallelTransactionExecutor_instances, getGasPrice_fn).call(this);\n};\nrefillCoinPool_fn = async function() {\n    var _effects_V2;\n    const batchSize = Math.min(__privateGet(this, _coinBatchSize), __privateGet(this, _maxPoolSize) - (__privateGet(this, _coinPool).length + __privateGet(this, _pendingTransactions)) + 1);\n    if (batchSize === 0) {\n        return;\n    }\n    const txb = new _Transaction_js__WEBPACK_IMPORTED_MODULE_6__.Transaction();\n    const address = __privateGet(this, _signer).toSuiAddress();\n    txb.setSender(address);\n    if (__privateGet(this, _sourceCoins)) {\n        const refs = [];\n        const ids = [];\n        for (const [id, ref] of __privateGet(this, _sourceCoins)){\n            if (ref) {\n                refs.push(ref);\n            } else {\n                ids.push(id);\n            }\n        }\n        if (ids.length > 0) {\n            const coins = await __privateGet(this, _client).multiGetObjects({\n                ids\n            });\n            refs.push(...coins.filter((coin)=>coin.data !== null).map((param)=>{\n                let { data } = param;\n                return {\n                    objectId: data.objectId,\n                    version: data.version,\n                    digest: data.digest\n                };\n            }));\n        }\n        txb.setGasPayment(refs);\n        __privateSet(this, _sourceCoins, /* @__PURE__ */ new Map());\n    }\n    const amounts = new Array(batchSize).fill(__privateGet(this, _initialCoinBalance));\n    const results = txb.splitCoins(txb.gas, amounts);\n    const coinResults = [];\n    for(let i = 0; i < amounts.length; i++){\n        coinResults.push(results[i]);\n    }\n    txb.transferObjects(coinResults, address);\n    await this.waitForLastTransaction();\n    const result = await __privateGet(this, _client).signAndExecuteTransaction({\n        transaction: txb,\n        signer: __privateGet(this, _signer),\n        options: {\n            showRawEffects: true\n        }\n    });\n    const effects = _bcs_index_js__WEBPACK_IMPORTED_MODULE_2__.bcs.TransactionEffects.parse(Uint8Array.from(result.rawEffects));\n    (_effects_V2 = effects.V2) === null || _effects_V2 === void 0 ? void 0 : _effects_V2.changedObjects.forEach((param, i)=>{\n        let [id, { outputState }] = param;\n        var _effects_V2;\n        if (i === ((_effects_V2 = effects.V2) === null || _effects_V2 === void 0 ? void 0 : _effects_V2.gasObjectIndex) || !outputState.ObjectWrite) {\n            return;\n        }\n        __privateGet(this, _coinPool).push({\n            id,\n            version: effects.V2.lamportVersion,\n            digest: outputState.ObjectWrite[0],\n            balance: BigInt(__privateGet(this, _initialCoinBalance))\n        });\n    });\n    if (!__privateGet(this, _sourceCoins)) {\n        __privateSet(this, _sourceCoins, /* @__PURE__ */ new Map());\n    }\n    const gasObject = (0,_serial_js__WEBPACK_IMPORTED_MODULE_3__.getGasCoinFromEffects)(effects).ref;\n    __privateGet(this, _sourceCoins).set(gasObject.objectId, gasObject);\n    await __privateGet(this, _client).waitForTransaction({\n        digest: result.digest\n    });\n};\nfunction promiseWithResolvers() {\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject)=>{\n        resolve = _resolve;\n        reject = _reject;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\n //# sourceMappingURL=parallel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/parallel.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/queue.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@mysten/sui/dist/esm/transactions/executor/queue.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParallelQueue: function() { return /* binding */ ParallelQueue; },\n/* harmony export */   SerialQueue: function() { return /* binding */ SerialQueue; }\n/* harmony export */ });\nvar __typeError = (msg)=>{\n    throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg)=>member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter)=>(__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value)=>member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar _queue, _queue2;\nclass SerialQueue {\n    async runTask(task) {\n        return new Promise((resolve, reject)=>{\n            __privateGet(this, _queue).push(()=>{\n                task().finally(()=>{\n                    __privateGet(this, _queue).shift();\n                    if (__privateGet(this, _queue).length > 0) {\n                        __privateGet(this, _queue)[0]();\n                    }\n                }).then(resolve, reject);\n            });\n            if (__privateGet(this, _queue).length === 1) {\n                __privateGet(this, _queue)[0]();\n            }\n        });\n    }\n    constructor(){\n        __privateAdd(this, _queue, []);\n    }\n}\n_queue = new WeakMap();\nclass ParallelQueue {\n    runTask(task) {\n        return new Promise((resolve, reject)=>{\n            if (this.activeTasks < this.maxTasks) {\n                this.activeTasks++;\n                task().finally(()=>{\n                    if (__privateGet(this, _queue2).length > 0) {\n                        __privateGet(this, _queue2).shift()();\n                    } else {\n                        this.activeTasks--;\n                    }\n                }).then(resolve, reject);\n            } else {\n                __privateGet(this, _queue2).push(()=>{\n                    task().finally(()=>{\n                        if (__privateGet(this, _queue2).length > 0) {\n                            __privateGet(this, _queue2).shift()();\n                        } else {\n                            this.activeTasks--;\n                        }\n                    }).then(resolve, reject);\n                });\n            }\n        });\n    }\n    constructor(maxTasks){\n        __privateAdd(this, _queue2, []);\n        this.activeTasks = 0;\n        this.maxTasks = maxTasks;\n    }\n}\n_queue2 = new WeakMap();\n //# sourceMappingURL=queue.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbXlzdGVuL3N1aS9kaXN0L2VzbS90cmFuc2FjdGlvbnMvZXhlY3V0b3IvcXVldWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxjQUFjLENBQUNDO0lBQ2pCLE1BQU1DLFVBQVVEO0FBQ2xCO0FBQ0EsSUFBSUUsZ0JBQWdCLENBQUNDLEtBQUtDLFFBQVFKLE1BQVFJLE9BQU9DLEdBQUcsQ0FBQ0YsUUFBUUosWUFBWSxZQUFZQztBQUNyRixJQUFJTSxlQUFlLENBQUNILEtBQUtDLFFBQVFHLFNBQVlMLENBQUFBLGNBQWNDLEtBQUtDLFFBQVEsNEJBQTRCRyxTQUFTQSxPQUFPQyxJQUFJLENBQUNMLE9BQU9DLE9BQU9LLEdBQUcsQ0FBQ04sSUFBRztBQUM5SSxJQUFJTyxlQUFlLENBQUNQLEtBQUtDLFFBQVFPLFFBQVVQLE9BQU9DLEdBQUcsQ0FBQ0YsT0FBT0osWUFBWSx1REFBdURLLGtCQUFrQlEsVUFBVVIsT0FBT1MsR0FBRyxDQUFDVixPQUFPQyxPQUFPVSxHQUFHLENBQUNYLEtBQUtRO0FBQzlMLElBQUlJLFFBQVFDO0FBQ1osTUFBTUM7SUFJSixNQUFNQyxRQUFRQyxJQUFJLEVBQUU7UUFDbEIsT0FBTyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1lBQzNCaEIsYUFBYSxJQUFJLEVBQUVTLFFBQVFRLElBQUksQ0FBQztnQkFDOUJKLE9BQU9LLE9BQU8sQ0FBQztvQkFDYmxCLGFBQWEsSUFBSSxFQUFFUyxRQUFRVSxLQUFLO29CQUNoQyxJQUFJbkIsYUFBYSxJQUFJLEVBQUVTLFFBQVFXLE1BQU0sR0FBRyxHQUFHO3dCQUN6Q3BCLGFBQWEsSUFBSSxFQUFFUyxPQUFPLENBQUMsRUFBRTtvQkFDL0I7Z0JBQ0YsR0FBR1ksSUFBSSxDQUFDTixTQUFTQztZQUNuQjtZQUNBLElBQUloQixhQUFhLElBQUksRUFBRVMsUUFBUVcsTUFBTSxLQUFLLEdBQUc7Z0JBQzNDcEIsYUFBYSxJQUFJLEVBQUVTLE9BQU8sQ0FBQyxFQUFFO1lBQy9CO1FBQ0Y7SUFDRjtJQWpCQWEsYUFBYztRQUNabEIsYUFBYSxJQUFJLEVBQUVLLFFBQVEsRUFBRTtJQUMvQjtBQWdCRjtBQUNBQSxTQUFTLElBQUljO0FBQ2IsTUFBTUM7SUFNSlosUUFBUUMsSUFBSSxFQUFFO1FBQ1osT0FBTyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1lBQzNCLElBQUksSUFBSSxDQUFDUyxXQUFXLEdBQUcsSUFBSSxDQUFDQyxRQUFRLEVBQUU7Z0JBQ3BDLElBQUksQ0FBQ0QsV0FBVztnQkFDaEJaLE9BQU9LLE9BQU8sQ0FBQztvQkFDYixJQUFJbEIsYUFBYSxJQUFJLEVBQUVVLFNBQVNVLE1BQU0sR0FBRyxHQUFHO3dCQUMxQ3BCLGFBQWEsSUFBSSxFQUFFVSxTQUFTUyxLQUFLO29CQUNuQyxPQUFPO3dCQUNMLElBQUksQ0FBQ00sV0FBVztvQkFDbEI7Z0JBQ0YsR0FBR0osSUFBSSxDQUFDTixTQUFTQztZQUNuQixPQUFPO2dCQUNMaEIsYUFBYSxJQUFJLEVBQUVVLFNBQVNPLElBQUksQ0FBQztvQkFDL0JKLE9BQU9LLE9BQU8sQ0FBQzt3QkFDYixJQUFJbEIsYUFBYSxJQUFJLEVBQUVVLFNBQVNVLE1BQU0sR0FBRyxHQUFHOzRCQUMxQ3BCLGFBQWEsSUFBSSxFQUFFVSxTQUFTUyxLQUFLO3dCQUNuQyxPQUFPOzRCQUNMLElBQUksQ0FBQ00sV0FBVzt3QkFDbEI7b0JBQ0YsR0FBR0osSUFBSSxDQUFDTixTQUFTQztnQkFDbkI7WUFDRjtRQUNGO0lBQ0Y7SUE1QkFNLFlBQVlJLFFBQVEsQ0FBRTtRQUNwQnRCLGFBQWEsSUFBSSxFQUFFTSxTQUFTLEVBQUU7UUFDOUIsSUFBSSxDQUFDZSxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyxRQUFRLEdBQUdBO0lBQ2xCO0FBeUJGO0FBQ0FoQixVQUFVLElBQUlhO0FBSVosQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpL2Rpc3QvZXNtL3RyYW5zYWN0aW9ucy9leGVjdXRvci9xdWV1ZS5qcz84ZWFiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX3R5cGVFcnJvciA9IChtc2cpID0+IHtcbiAgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG59O1xudmFyIF9fYWNjZXNzQ2hlY2sgPSAob2JqLCBtZW1iZXIsIG1zZykgPT4gbWVtYmVyLmhhcyhvYmopIHx8IF9fdHlwZUVycm9yKFwiQ2Fubm90IFwiICsgbXNnKTtcbnZhciBfX3ByaXZhdGVHZXQgPSAob2JqLCBtZW1iZXIsIGdldHRlcikgPT4gKF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwicmVhZCBmcm9tIHByaXZhdGUgZmllbGRcIiksIGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiBtZW1iZXIuZ2V0KG9iaikpO1xudmFyIF9fcHJpdmF0ZUFkZCA9IChvYmosIG1lbWJlciwgdmFsdWUpID0+IG1lbWJlci5oYXMob2JqKSA/IF9fdHlwZUVycm9yKFwiQ2Fubm90IGFkZCB0aGUgc2FtZSBwcml2YXRlIG1lbWJlciBtb3JlIHRoYW4gb25jZVwiKSA6IG1lbWJlciBpbnN0YW5jZW9mIFdlYWtTZXQgPyBtZW1iZXIuYWRkKG9iaikgOiBtZW1iZXIuc2V0KG9iaiwgdmFsdWUpO1xudmFyIF9xdWV1ZSwgX3F1ZXVlMjtcbmNsYXNzIFNlcmlhbFF1ZXVlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF9xdWV1ZSwgW10pO1xuICB9XG4gIGFzeW5jIHJ1blRhc2sodGFzaykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBfX3ByaXZhdGVHZXQodGhpcywgX3F1ZXVlKS5wdXNoKCgpID0+IHtcbiAgICAgICAgdGFzaygpLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgIF9fcHJpdmF0ZUdldCh0aGlzLCBfcXVldWUpLnNoaWZ0KCk7XG4gICAgICAgICAgaWYgKF9fcHJpdmF0ZUdldCh0aGlzLCBfcXVldWUpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIF9fcHJpdmF0ZUdldCh0aGlzLCBfcXVldWUpWzBdKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIGlmIChfX3ByaXZhdGVHZXQodGhpcywgX3F1ZXVlKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgX19wcml2YXRlR2V0KHRoaXMsIF9xdWV1ZSlbMF0oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuX3F1ZXVlID0gbmV3IFdlYWtNYXAoKTtcbmNsYXNzIFBhcmFsbGVsUXVldWUge1xuICBjb25zdHJ1Y3RvcihtYXhUYXNrcykge1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfcXVldWUyLCBbXSk7XG4gICAgdGhpcy5hY3RpdmVUYXNrcyA9IDA7XG4gICAgdGhpcy5tYXhUYXNrcyA9IG1heFRhc2tzO1xuICB9XG4gIHJ1blRhc2sodGFzaykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAodGhpcy5hY3RpdmVUYXNrcyA8IHRoaXMubWF4VGFza3MpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVUYXNrcysrO1xuICAgICAgICB0YXNrKCkuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgaWYgKF9fcHJpdmF0ZUdldCh0aGlzLCBfcXVldWUyKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBfX3ByaXZhdGVHZXQodGhpcywgX3F1ZXVlMikuc2hpZnQoKSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVRhc2tzLS07XG4gICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfX3ByaXZhdGVHZXQodGhpcywgX3F1ZXVlMikucHVzaCgoKSA9PiB7XG4gICAgICAgICAgdGFzaygpLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKF9fcHJpdmF0ZUdldCh0aGlzLCBfcXVldWUyKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIF9fcHJpdmF0ZUdldCh0aGlzLCBfcXVldWUyKS5zaGlmdCgpKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVRhc2tzLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuX3F1ZXVlMiA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnQge1xuICBQYXJhbGxlbFF1ZXVlLFxuICBTZXJpYWxRdWV1ZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXVlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9fdHlwZUVycm9yIiwibXNnIiwiVHlwZUVycm9yIiwiX19hY2Nlc3NDaGVjayIsIm9iaiIsIm1lbWJlciIsImhhcyIsIl9fcHJpdmF0ZUdldCIsImdldHRlciIsImNhbGwiLCJnZXQiLCJfX3ByaXZhdGVBZGQiLCJ2YWx1ZSIsIldlYWtTZXQiLCJhZGQiLCJzZXQiLCJfcXVldWUiLCJfcXVldWUyIiwiU2VyaWFsUXVldWUiLCJydW5UYXNrIiwidGFzayIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicHVzaCIsImZpbmFsbHkiLCJzaGlmdCIsImxlbmd0aCIsInRoZW4iLCJjb25zdHJ1Y3RvciIsIldlYWtNYXAiLCJQYXJhbGxlbFF1ZXVlIiwiYWN0aXZlVGFza3MiLCJtYXhUYXNrcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/queue.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/serial.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@mysten/sui/dist/esm/transactions/executor/serial.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SerialTransactionExecutor: function() { return /* binding */ SerialTransactionExecutor; },\n/* harmony export */   getGasCoinFromEffects: function() { return /* binding */ getGasCoinFromEffects; }\n/* harmony export */ });\n/* harmony import */ var _mysten_bcs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @mysten/bcs */ \"(app-pages-browser)/./node_modules/@mysten/bcs/dist/esm/b64.js\");\n/* harmony import */ var _Transaction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Transaction.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/Transaction.js\");\n/* harmony import */ var _caching_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./caching.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/caching.js\");\n/* harmony import */ var _queue_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queue.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/queue.js\");\nvar __typeError = (msg)=>{\n    throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg)=>member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter)=>(__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value)=>member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter)=>(__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _queue, _signer, _cache, _defaultGasBudget, _cacheGasCoin, _buildTransaction;\n\n\n\n\nclass SerialTransactionExecutor {\n    async applyEffects(effects) {\n        return __privateGet(this, _cache).applyEffects(effects);\n    }\n    async buildTransaction(transaction) {\n        return __privateGet(this, _queue).runTask(()=>__privateGet(this, _buildTransaction).call(this, transaction));\n    }\n    resetCache() {\n        return __privateGet(this, _cache).reset();\n    }\n    waitForLastTransaction() {\n        return __privateGet(this, _cache).waitForLastTransaction();\n    }\n    executeTransaction(transaction, options) {\n        return __privateGet(this, _queue).runTask(async ()=>{\n            const bytes = (0,_Transaction_js__WEBPACK_IMPORTED_MODULE_0__.isTransaction)(transaction) ? await __privateGet(this, _buildTransaction).call(this, transaction) : transaction;\n            const { signature } = await __privateGet(this, _signer).signTransaction(bytes);\n            const results = await __privateGet(this, _cache).executeTransaction({\n                signature,\n                transaction: bytes,\n                options\n            }).catch(async (error)=>{\n                await this.resetCache();\n                throw error;\n            });\n            const effectsBytes = Uint8Array.from(results.rawEffects);\n            return {\n                digest: results.digest,\n                effects: (0,_mysten_bcs__WEBPACK_IMPORTED_MODULE_1__.toBase64)(effectsBytes),\n                data: results\n            };\n        });\n    }\n    constructor({ signer, defaultGasBudget = 50000000n, ...options }){\n        __privateAdd(this, _queue, new _queue_js__WEBPACK_IMPORTED_MODULE_2__.SerialQueue());\n        __privateAdd(this, _signer);\n        __privateAdd(this, _cache);\n        __privateAdd(this, _defaultGasBudget);\n        __privateAdd(this, _cacheGasCoin, async (effects)=>{\n            if (!effects.V2) {\n                return;\n            }\n            const gasCoin = getGasCoinFromEffects(effects).ref;\n            if (gasCoin) {\n                __privateGet(this, _cache).cache.setCustom(\"gasCoin\", gasCoin);\n            } else {\n                __privateGet(this, _cache).cache.deleteCustom(\"gasCoin\");\n            }\n        });\n        __privateAdd(this, _buildTransaction, async (transaction)=>{\n            const gasCoin = await __privateGet(this, _cache).cache.getCustom(\"gasCoin\");\n            const copy = _Transaction_js__WEBPACK_IMPORTED_MODULE_0__.Transaction.from(transaction);\n            if (gasCoin) {\n                copy.setGasPayment([\n                    gasCoin\n                ]);\n            }\n            copy.setGasBudgetIfNotSet(__privateGet(this, _defaultGasBudget));\n            copy.setSenderIfNotSet(__privateGet(this, _signer).toSuiAddress());\n            return __privateGet(this, _cache).buildTransaction({\n                transaction: copy\n            });\n        });\n        __privateSet(this, _signer, signer);\n        __privateSet(this, _defaultGasBudget, defaultGasBudget);\n        __privateSet(this, _cache, new _caching_js__WEBPACK_IMPORTED_MODULE_3__.CachingTransactionExecutor({\n            client: options.client,\n            cache: options.cache,\n            onEffects: (effects)=>__privateGet(this, _cacheGasCoin).call(this, effects)\n        }));\n    }\n}\n_queue = new WeakMap();\n_signer = new WeakMap();\n_cache = new WeakMap();\n_defaultGasBudget = new WeakMap();\n_cacheGasCoin = new WeakMap();\n_buildTransaction = new WeakMap();\nfunction getGasCoinFromEffects(effects) {\n    if (!effects.V2) {\n        throw new Error(\"Unexpected effects version\");\n    }\n    const gasObjectChange = effects.V2.changedObjects[effects.V2.gasObjectIndex];\n    if (!gasObjectChange) {\n        throw new Error(\"Gas object not found in effects\");\n    }\n    const [objectId, { outputState }] = gasObjectChange;\n    if (!outputState.ObjectWrite) {\n        throw new Error(\"Unexpected gas object state\");\n    }\n    const [digest, owner] = outputState.ObjectWrite;\n    return {\n        ref: {\n            objectId,\n            digest,\n            version: effects.V2.lamportVersion\n        },\n        owner: owner.AddressOwner || owner.ObjectOwner\n    };\n}\n //# sourceMappingURL=serial.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/serial.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@mysten/sui/dist/esm/transactions/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Arguments: function() { return /* reexport safe */ _Arguments_js__WEBPACK_IMPORTED_MODULE_0__.Arguments; },\n/* harmony export */   AsyncCache: function() { return /* reexport safe */ _ObjectCache_js__WEBPACK_IMPORTED_MODULE_1__.AsyncCache; },\n/* harmony export */   Commands: function() { return /* reexport safe */ _Commands_js__WEBPACK_IMPORTED_MODULE_2__.Commands; },\n/* harmony export */   Inputs: function() { return /* reexport safe */ _Inputs_js__WEBPACK_IMPORTED_MODULE_3__.Inputs; },\n/* harmony export */   ObjectCache: function() { return /* reexport safe */ _ObjectCache_js__WEBPACK_IMPORTED_MODULE_1__.ObjectCache; },\n/* harmony export */   ParallelTransactionExecutor: function() { return /* reexport safe */ _executor_parallel_js__WEBPACK_IMPORTED_MODULE_4__.ParallelTransactionExecutor; },\n/* harmony export */   SerialTransactionExecutor: function() { return /* reexport safe */ _executor_serial_js__WEBPACK_IMPORTED_MODULE_5__.SerialTransactionExecutor; },\n/* harmony export */   Transaction: function() { return /* reexport safe */ _Transaction_js__WEBPACK_IMPORTED_MODULE_6__.Transaction; },\n/* harmony export */   TransactionDataBuilder: function() { return /* reexport safe */ _TransactionData_js__WEBPACK_IMPORTED_MODULE_7__.TransactionDataBuilder; },\n/* harmony export */   UpgradePolicy: function() { return /* reexport safe */ _Commands_js__WEBPACK_IMPORTED_MODULE_2__.UpgradePolicy; },\n/* harmony export */   coinWithBalance: function() { return /* reexport safe */ _intents_CoinWithBalance_js__WEBPACK_IMPORTED_MODULE_8__.coinWithBalance; },\n/* harmony export */   getPureBcsSchema: function() { return /* reexport safe */ _serializer_js__WEBPACK_IMPORTED_MODULE_9__.getPureBcsSchema; },\n/* harmony export */   isArgument: function() { return /* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_10__.isArgument; },\n/* harmony export */   isTransaction: function() { return /* reexport safe */ _Transaction_js__WEBPACK_IMPORTED_MODULE_6__.isTransaction; },\n/* harmony export */   namedPackagesPlugin: function() { return /* reexport safe */ _plugins_NamedPackagesPlugin_js__WEBPACK_IMPORTED_MODULE_11__.namedPackagesPlugin; },\n/* harmony export */   normalizedTypeToMoveTypeSignature: function() { return /* reexport safe */ _serializer_js__WEBPACK_IMPORTED_MODULE_9__.normalizedTypeToMoveTypeSignature; }\n/* harmony export */ });\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./serializer.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/serializer.js\");\n/* harmony import */ var _Inputs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Inputs.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/Inputs.js\");\n/* harmony import */ var _Commands_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Commands.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/Commands.js\");\n/* harmony import */ var _Transaction_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Transaction.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/Transaction.js\");\n/* harmony import */ var _TransactionData_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TransactionData.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/TransactionData.js\");\n/* harmony import */ var _ObjectCache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ObjectCache.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/ObjectCache.js\");\n/* harmony import */ var _executor_serial_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./executor/serial.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/serial.js\");\n/* harmony import */ var _executor_parallel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./executor/parallel.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/executor/parallel.js\");\n/* harmony import */ var _intents_CoinWithBalance_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./intents/CoinWithBalance.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/intents/CoinWithBalance.js\");\n/* harmony import */ var _Arguments_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Arguments.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/Arguments.js\");\n/* harmony import */ var _plugins_NamedPackagesPlugin_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./plugins/NamedPackagesPlugin.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/plugins/NamedPackagesPlugin.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbXlzdGVuL3N1aS9kaXN0L2VzbS90cmFuc2FjdGlvbnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRjtBQUNqRDtBQUlkO0FBSUc7QUFDb0M7QUFDSDtBQUNNO0FBQ0k7QUFDTjtBQUNwQjtBQUdEO0FBQ0Y7QUFrQnRDLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbXlzdGVuL3N1aS9kaXN0L2VzbS90cmFuc2FjdGlvbnMvaW5kZXguanM/YmQwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBub3JtYWxpemVkVHlwZVRvTW92ZVR5cGVTaWduYXR1cmUsIGdldFB1cmVCY3NTY2hlbWEgfSBmcm9tIFwiLi9zZXJpYWxpemVyLmpzXCI7XG5pbXBvcnQgeyBJbnB1dHMgfSBmcm9tIFwiLi9JbnB1dHMuanNcIjtcbmltcG9ydCB7XG4gIENvbW1hbmRzLFxuICBVcGdyYWRlUG9saWN5XG59IGZyb20gXCIuL0NvbW1hbmRzLmpzXCI7XG5pbXBvcnQge1xuICBUcmFuc2FjdGlvbixcbiAgaXNUcmFuc2FjdGlvblxufSBmcm9tIFwiLi9UcmFuc2FjdGlvbi5qc1wiO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25EYXRhQnVpbGRlciB9IGZyb20gXCIuL1RyYW5zYWN0aW9uRGF0YS5qc1wiO1xuaW1wb3J0IHsgT2JqZWN0Q2FjaGUsIEFzeW5jQ2FjaGUgfSBmcm9tIFwiLi9PYmplY3RDYWNoZS5qc1wiO1xuaW1wb3J0IHsgU2VyaWFsVHJhbnNhY3Rpb25FeGVjdXRvciB9IGZyb20gXCIuL2V4ZWN1dG9yL3NlcmlhbC5qc1wiO1xuaW1wb3J0IHsgUGFyYWxsZWxUcmFuc2FjdGlvbkV4ZWN1dG9yIH0gZnJvbSBcIi4vZXhlY3V0b3IvcGFyYWxsZWwuanNcIjtcbmltcG9ydCB7IGNvaW5XaXRoQmFsYW5jZSB9IGZyb20gXCIuL2ludGVudHMvQ29pbldpdGhCYWxhbmNlLmpzXCI7XG5pbXBvcnQgeyBBcmd1bWVudHMgfSBmcm9tIFwiLi9Bcmd1bWVudHMuanNcIjtcbmltcG9ydCB7XG4gIG5hbWVkUGFja2FnZXNQbHVnaW5cbn0gZnJvbSBcIi4vcGx1Z2lucy9OYW1lZFBhY2thZ2VzUGx1Z2luLmpzXCI7XG5pbXBvcnQgeyBpc0FyZ3VtZW50IH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmV4cG9ydCB7XG4gIEFyZ3VtZW50cyxcbiAgQXN5bmNDYWNoZSxcbiAgQ29tbWFuZHMsXG4gIElucHV0cyxcbiAgT2JqZWN0Q2FjaGUsXG4gIFBhcmFsbGVsVHJhbnNhY3Rpb25FeGVjdXRvcixcbiAgU2VyaWFsVHJhbnNhY3Rpb25FeGVjdXRvcixcbiAgVHJhbnNhY3Rpb24sXG4gIFRyYW5zYWN0aW9uRGF0YUJ1aWxkZXIsXG4gIFVwZ3JhZGVQb2xpY3ksXG4gIGNvaW5XaXRoQmFsYW5jZSxcbiAgZ2V0UHVyZUJjc1NjaGVtYSxcbiAgaXNBcmd1bWVudCxcbiAgaXNUcmFuc2FjdGlvbixcbiAgbmFtZWRQYWNrYWdlc1BsdWdpbixcbiAgbm9ybWFsaXplZFR5cGVUb01vdmVUeXBlU2lnbmF0dXJlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsibm9ybWFsaXplZFR5cGVUb01vdmVUeXBlU2lnbmF0dXJlIiwiZ2V0UHVyZUJjc1NjaGVtYSIsIklucHV0cyIsIkNvbW1hbmRzIiwiVXBncmFkZVBvbGljeSIsIlRyYW5zYWN0aW9uIiwiaXNUcmFuc2FjdGlvbiIsIlRyYW5zYWN0aW9uRGF0YUJ1aWxkZXIiLCJPYmplY3RDYWNoZSIsIkFzeW5jQ2FjaGUiLCJTZXJpYWxUcmFuc2FjdGlvbkV4ZWN1dG9yIiwiUGFyYWxsZWxUcmFuc2FjdGlvbkV4ZWN1dG9yIiwiY29pbldpdGhCYWxhbmNlIiwiQXJndW1lbnRzIiwibmFtZWRQYWNrYWdlc1BsdWdpbiIsImlzQXJndW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/intents/CoinWithBalance.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@mysten/sui/dist/esm/transactions/intents/CoinWithBalance.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coinWithBalance: function() { return /* binding */ coinWithBalance; }\n/* harmony export */ });\n/* harmony import */ var valibot__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! valibot */ \"(app-pages-browser)/./node_modules/valibot/dist/index.js\");\n/* harmony import */ var _bcs_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../bcs/index.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/bcs/index.js\");\n/* harmony import */ var _utils_sui_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/sui-types.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/utils/sui-types.js\");\n/* harmony import */ var _Commands_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Commands.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/Commands.js\");\n/* harmony import */ var _Inputs_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Inputs.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/Inputs.js\");\n/* harmony import */ var _json_rpc_resolver_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../json-rpc-resolver.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/json-rpc-resolver.js\");\n\n\n\n\n\n\nconst COIN_WITH_BALANCE = \"CoinWithBalance\";\nconst SUI_TYPE = (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_0__.normalizeStructTag)(\"0x2::sui::SUI\");\nfunction coinWithBalance(param) {\n    let { type = SUI_TYPE, balance, useGasCoin = true } = param;\n    return (tx)=>{\n        tx.addIntentResolver(COIN_WITH_BALANCE, resolveCoinBalance);\n        const coinType = type === \"gas\" ? type : (0,_utils_sui_types_js__WEBPACK_IMPORTED_MODULE_0__.normalizeStructTag)(type);\n        return tx.add(_Commands_js__WEBPACK_IMPORTED_MODULE_1__.Commands.Intent({\n            name: COIN_WITH_BALANCE,\n            inputs: {},\n            data: {\n                type: coinType === SUI_TYPE && useGasCoin ? \"gas\" : coinType,\n                balance: BigInt(balance)\n            }\n        }));\n    };\n}\nconst CoinWithBalanceData = (0,valibot__WEBPACK_IMPORTED_MODULE_2__.object)({\n    type: (0,valibot__WEBPACK_IMPORTED_MODULE_2__.string)(),\n    balance: (0,valibot__WEBPACK_IMPORTED_MODULE_2__.bigint)()\n});\nasync function resolveCoinBalance(transactionData, buildOptions, next) {\n    const coinTypes = /* @__PURE__ */ new Set();\n    const totalByType = /* @__PURE__ */ new Map();\n    if (!transactionData.sender) {\n        throw new Error(\"Sender must be set to resolve CoinWithBalance\");\n    }\n    for (const command of transactionData.commands){\n        if (command.$kind === \"$Intent\" && command.$Intent.name === COIN_WITH_BALANCE) {\n            const { type, balance } = (0,valibot__WEBPACK_IMPORTED_MODULE_2__.parse)(CoinWithBalanceData, command.$Intent.data);\n            if (type !== \"gas\" && balance > 0n) {\n                coinTypes.add(type);\n            }\n            var _totalByType_get;\n            totalByType.set(type, ((_totalByType_get = totalByType.get(type)) !== null && _totalByType_get !== void 0 ? _totalByType_get : 0n) + balance);\n        }\n    }\n    const usedIds = /* @__PURE__ */ new Set();\n    for (const input of transactionData.inputs){\n        var _input_Object, _input_UnresolvedObject;\n        if ((_input_Object = input.Object) === null || _input_Object === void 0 ? void 0 : _input_Object.ImmOrOwnedObject) {\n            usedIds.add(input.Object.ImmOrOwnedObject.objectId);\n        }\n        if ((_input_UnresolvedObject = input.UnresolvedObject) === null || _input_UnresolvedObject === void 0 ? void 0 : _input_UnresolvedObject.objectId) {\n            usedIds.add(input.UnresolvedObject.objectId);\n        }\n    }\n    const coinsByType = /* @__PURE__ */ new Map();\n    const client = (0,_json_rpc_resolver_js__WEBPACK_IMPORTED_MODULE_3__.getClient)(buildOptions);\n    await Promise.all([\n        ...coinTypes\n    ].map(async (coinType)=>{\n        coinsByType.set(coinType, await getCoinsOfType({\n            coinType,\n            balance: totalByType.get(coinType),\n            client,\n            owner: transactionData.sender,\n            usedIds\n        }));\n    }));\n    const mergedCoins = /* @__PURE__ */ new Map();\n    mergedCoins.set(\"gas\", {\n        $kind: \"GasCoin\",\n        GasCoin: true\n    });\n    for (const [index, transaction] of transactionData.commands.entries()){\n        if (transaction.$kind !== \"$Intent\" || transaction.$Intent.name !== COIN_WITH_BALANCE) {\n            continue;\n        }\n        const { type, balance } = transaction.$Intent.data;\n        if (balance === 0n) {\n            transactionData.replaceCommand(index, _Commands_js__WEBPACK_IMPORTED_MODULE_1__.Commands.MoveCall({\n                target: \"0x2::coin::zero\",\n                typeArguments: [\n                    type\n                ]\n            }));\n            continue;\n        }\n        const commands = [];\n        if (!mergedCoins.has(type)) {\n            const [first, ...rest] = coinsByType.get(type).map((coin)=>transactionData.addInput(\"object\", _Inputs_js__WEBPACK_IMPORTED_MODULE_4__.Inputs.ObjectRef({\n                    objectId: coin.coinObjectId,\n                    digest: coin.digest,\n                    version: coin.version\n                })));\n            if (rest.length > 0) {\n                commands.push(_Commands_js__WEBPACK_IMPORTED_MODULE_1__.Commands.MergeCoins(first, rest));\n            }\n            mergedCoins.set(type, first);\n        }\n        commands.push(_Commands_js__WEBPACK_IMPORTED_MODULE_1__.Commands.SplitCoins(mergedCoins.get(type), [\n            transactionData.addInput(\"pure\", _Inputs_js__WEBPACK_IMPORTED_MODULE_4__.Inputs.Pure(_bcs_index_js__WEBPACK_IMPORTED_MODULE_5__.bcs.u64().serialize(balance)))\n        ]));\n        transactionData.replaceCommand(index, commands);\n        transactionData.mapArguments((arg)=>{\n            if (arg.$kind === \"Result\" && arg.Result === index) {\n                return {\n                    $kind: \"NestedResult\",\n                    NestedResult: [\n                        index + commands.length - 1,\n                        0\n                    ]\n                };\n            }\n            return arg;\n        });\n    }\n    return next();\n}\nasync function getCoinsOfType(param) {\n    let { coinType, balance, client, owner, usedIds } = param;\n    let remainingBalance = balance;\n    const coins = [];\n    return loadMoreCoins();\n    async function loadMoreCoins() {\n        let cursor = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        const { data, hasNextPage, nextCursor } = await client.getCoins({\n            owner,\n            coinType,\n            cursor\n        });\n        const sortedCoins = data.sort((a, b)=>Number(BigInt(b.balance) - BigInt(a.balance)));\n        for (const coin of sortedCoins){\n            if (usedIds.has(coin.coinObjectId)) {\n                continue;\n            }\n            const coinBalance = BigInt(coin.balance);\n            coins.push(coin);\n            remainingBalance -= coinBalance;\n            if (remainingBalance <= 0) {\n                return coins;\n            }\n        }\n        if (hasNextPage) {\n            return loadMoreCoins(nextCursor);\n        }\n        throw new Error(\"Not enough coins of type \".concat(coinType, \" to satisfy requested balance\"));\n    }\n}\n //# sourceMappingURL=CoinWithBalance.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/intents/CoinWithBalance.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/plugins/NamedPackagesPlugin.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@mysten/sui/dist/esm/transactions/plugins/NamedPackagesPlugin.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   namedPackagesPlugin: function() { return /* binding */ namedPackagesPlugin; }\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/plugins/utils.js\");\n\nconst namedPackagesPlugin = (param)=>{\n    let { suiGraphQLClient, pageSize = 10, overrides = {\n        packages: {},\n        types: {}\n    } } = param;\n    const cache = {\n        packages: {\n            ...overrides.packages\n        },\n        types: {\n            ...overrides.types\n        }\n    };\n    return async (transactionData, _buildOptions, next)=>{\n        const names = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.findTransactionBlockNames)(transactionData);\n        const batches = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.listToRequests)({\n            packages: names.packages.filter((x)=>!cache.packages[x]),\n            types: names.types.filter((x)=>!cache.types[x])\n        }, pageSize);\n        (await Promise.all(batches.map((batch)=>query(suiGraphQLClient, batch)))).forEach((res)=>{\n            Object.assign(cache.types, res.types);\n            Object.assign(cache.packages, res.packages);\n        });\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.replaceNames)(transactionData, cache);\n        await next();\n    };\n    async function query(client, requests) {\n        const results = {\n            packages: {},\n            types: {}\n        };\n        if (requests.length === 0) return results;\n        const gqlQuery = \"{\\n        \".concat(requests.map((req)=>{\n            const request = req.type === \"package\" ? \"packageByName\" : \"typeByName\";\n            const fields = req.type === \"package\" ? \"address\" : \"repr\";\n            return \"\".concat(gqlQueryKey(req.id), \": \").concat(request, '(name:\"').concat(req.name, '\") {\\n                    ').concat(fields, \"\\n                }\");\n        }), \"\\n    }\");\n        const result = await client.query({\n            query: gqlQuery,\n            variables: void 0\n        });\n        if (result.errors) throw new Error(JSON.stringify({\n            query: gqlQuery,\n            errors: result.errors\n        }));\n        for (const req of requests){\n            const key = gqlQueryKey(req.id);\n            if (!result.data || !result.data[key]) throw new Error(\"No result found for: \".concat(req.name));\n            const data = result.data[key];\n            if (req.type === \"package\") results.packages[req.name] = data.address;\n            if (req.type === \"moveType\") results.types[req.name] = data.repr;\n        }\n        return results;\n    }\n};\nconst gqlQueryKey = (idx)=>\"key_\".concat(idx);\n //# sourceMappingURL=NamedPackagesPlugin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbXlzdGVuL3N1aS9kaXN0L2VzbS90cmFuc2FjdGlvbnMvcGx1Z2lucy9OYW1lZFBhY2thZ2VzUGx1Z2luLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFGO0FBQ3JGLE1BQU1HLHNCQUFzQjtRQUFDLEVBQzNCQyxnQkFBZ0IsRUFDaEJDLFdBQVcsRUFBRSxFQUNiQyxZQUFZO1FBQUVDLFVBQVUsQ0FBQztRQUFHQyxPQUFPLENBQUM7SUFBRSxDQUFDLEVBQ3hDO0lBQ0MsTUFBTUMsUUFBUTtRQUNaRixVQUFVO1lBQUUsR0FBR0QsVUFBVUMsUUFBUTtRQUFDO1FBQ2xDQyxPQUFPO1lBQUUsR0FBR0YsVUFBVUUsS0FBSztRQUFDO0lBQzlCO0lBQ0EsT0FBTyxPQUFPRSxpQkFBaUJDLGVBQWVDO1FBQzVDLE1BQU1DLFFBQVFiLG9FQUF5QkEsQ0FBQ1U7UUFDeEMsTUFBTUksVUFBVWIseURBQWNBLENBQzVCO1lBQ0VNLFVBQVVNLE1BQU1OLFFBQVEsQ0FBQ1EsTUFBTSxDQUFDLENBQUNDLElBQU0sQ0FBQ1AsTUFBTUYsUUFBUSxDQUFDUyxFQUFFO1lBQ3pEUixPQUFPSyxNQUFNTCxLQUFLLENBQUNPLE1BQU0sQ0FBQyxDQUFDQyxJQUFNLENBQUNQLE1BQU1ELEtBQUssQ0FBQ1EsRUFBRTtRQUNsRCxHQUNBWDtRQUVELE9BQU1ZLFFBQVFDLEdBQUcsQ0FBQ0osUUFBUUssR0FBRyxDQUFDLENBQUNDLFFBQVVDLE1BQU1qQixrQkFBa0JnQixRQUFPLEVBQUdFLE9BQU8sQ0FBQyxDQUFDQztZQUNuRkMsT0FBT0MsTUFBTSxDQUFDaEIsTUFBTUQsS0FBSyxFQUFFZSxJQUFJZixLQUFLO1lBQ3BDZ0IsT0FBT0MsTUFBTSxDQUFDaEIsTUFBTUYsUUFBUSxFQUFFZ0IsSUFBSWhCLFFBQVE7UUFDNUM7UUFDQUwsdURBQVlBLENBQUNRLGlCQUFpQkQ7UUFDOUIsTUFBTUc7SUFDUjtJQUNBLGVBQWVTLE1BQU1LLE1BQU0sRUFBRUMsUUFBUTtRQUNuQyxNQUFNQyxVQUFVO1lBQUVyQixVQUFVLENBQUM7WUFBR0MsT0FBTyxDQUFDO1FBQUU7UUFDMUMsSUFBSW1CLFNBQVNFLE1BQU0sS0FBSyxHQUFHLE9BQU9EO1FBQ2xDLE1BQU1FLFdBQVcsY0FPZCxPQU5HSCxTQUFTUixHQUFHLENBQUMsQ0FBQ1k7WUFDbEIsTUFBTUMsVUFBVUQsSUFBSUUsSUFBSSxLQUFLLFlBQVksa0JBQWtCO1lBQzNELE1BQU1DLFNBQVNILElBQUlFLElBQUksS0FBSyxZQUFZLFlBQVk7WUFDcEQsT0FBTyxHQUEyQkQsT0FBeEJHLFlBQVlKLElBQUlLLEVBQUUsR0FBRSxNQUFxQkwsT0FBakJDLFNBQVEsV0FDMUJFLE9BRG1DSCxJQUFJTSxJQUFJLEVBQUMsOEJBQ3JDLE9BQVBILFFBQU87UUFFekIsSUFBRztRQUVILE1BQU1JLFNBQVMsTUFBTVosT0FBT0wsS0FBSyxDQUFDO1lBQ2hDQSxPQUFPUztZQUNQUyxXQUFXLEtBQUs7UUFDbEI7UUFDQSxJQUFJRCxPQUFPRSxNQUFNLEVBQUUsTUFBTSxJQUFJQyxNQUFNQyxLQUFLQyxTQUFTLENBQUM7WUFBRXRCLE9BQU9TO1lBQVVVLFFBQVFGLE9BQU9FLE1BQU07UUFBQztRQUMzRixLQUFLLE1BQU1ULE9BQU9KLFNBQVU7WUFDMUIsTUFBTWlCLE1BQU1ULFlBQVlKLElBQUlLLEVBQUU7WUFDOUIsSUFBSSxDQUFDRSxPQUFPTyxJQUFJLElBQUksQ0FBQ1AsT0FBT08sSUFBSSxDQUFDRCxJQUFJLEVBQUUsTUFBTSxJQUFJSCxNQUFNLHdCQUFpQyxPQUFUVixJQUFJTSxJQUFJO1lBQ3ZGLE1BQU1RLE9BQU9QLE9BQU9PLElBQUksQ0FBQ0QsSUFBSTtZQUM3QixJQUFJYixJQUFJRSxJQUFJLEtBQUssV0FBV0wsUUFBUXJCLFFBQVEsQ0FBQ3dCLElBQUlNLElBQUksQ0FBQyxHQUFHUSxLQUFLQyxPQUFPO1lBQ3JFLElBQUlmLElBQUlFLElBQUksS0FBSyxZQUFZTCxRQUFRcEIsS0FBSyxDQUFDdUIsSUFBSU0sSUFBSSxDQUFDLEdBQUdRLEtBQUtFLElBQUk7UUFDbEU7UUFDQSxPQUFPbkI7SUFDVDtBQUNGO0FBQ0EsTUFBTU8sY0FBYyxDQUFDYSxNQUFRLE9BQVcsT0FBSkE7QUFHbEMsQ0FDRiwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BteXN0ZW4vc3VpL2Rpc3QvZXNtL3RyYW5zYWN0aW9ucy9wbHVnaW5zL05hbWVkUGFja2FnZXNQbHVnaW4uanM/NDdkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmaW5kVHJhbnNhY3Rpb25CbG9ja05hbWVzLCBsaXN0VG9SZXF1ZXN0cywgcmVwbGFjZU5hbWVzIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmNvbnN0IG5hbWVkUGFja2FnZXNQbHVnaW4gPSAoe1xuICBzdWlHcmFwaFFMQ2xpZW50LFxuICBwYWdlU2l6ZSA9IDEwLFxuICBvdmVycmlkZXMgPSB7IHBhY2thZ2VzOiB7fSwgdHlwZXM6IHt9IH1cbn0pID0+IHtcbiAgY29uc3QgY2FjaGUgPSB7XG4gICAgcGFja2FnZXM6IHsgLi4ub3ZlcnJpZGVzLnBhY2thZ2VzIH0sXG4gICAgdHlwZXM6IHsgLi4ub3ZlcnJpZGVzLnR5cGVzIH1cbiAgfTtcbiAgcmV0dXJuIGFzeW5jICh0cmFuc2FjdGlvbkRhdGEsIF9idWlsZE9wdGlvbnMsIG5leHQpID0+IHtcbiAgICBjb25zdCBuYW1lcyA9IGZpbmRUcmFuc2FjdGlvbkJsb2NrTmFtZXModHJhbnNhY3Rpb25EYXRhKTtcbiAgICBjb25zdCBiYXRjaGVzID0gbGlzdFRvUmVxdWVzdHMoXG4gICAgICB7XG4gICAgICAgIHBhY2thZ2VzOiBuYW1lcy5wYWNrYWdlcy5maWx0ZXIoKHgpID0+ICFjYWNoZS5wYWNrYWdlc1t4XSksXG4gICAgICAgIHR5cGVzOiBuYW1lcy50eXBlcy5maWx0ZXIoKHgpID0+ICFjYWNoZS50eXBlc1t4XSlcbiAgICAgIH0sXG4gICAgICBwYWdlU2l6ZVxuICAgICk7XG4gICAgKGF3YWl0IFByb21pc2UuYWxsKGJhdGNoZXMubWFwKChiYXRjaCkgPT4gcXVlcnkoc3VpR3JhcGhRTENsaWVudCwgYmF0Y2gpKSkpLmZvckVhY2goKHJlcykgPT4ge1xuICAgICAgT2JqZWN0LmFzc2lnbihjYWNoZS50eXBlcywgcmVzLnR5cGVzKTtcbiAgICAgIE9iamVjdC5hc3NpZ24oY2FjaGUucGFja2FnZXMsIHJlcy5wYWNrYWdlcyk7XG4gICAgfSk7XG4gICAgcmVwbGFjZU5hbWVzKHRyYW5zYWN0aW9uRGF0YSwgY2FjaGUpO1xuICAgIGF3YWl0IG5leHQoKTtcbiAgfTtcbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnkoY2xpZW50LCByZXF1ZXN0cykge1xuICAgIGNvbnN0IHJlc3VsdHMgPSB7IHBhY2thZ2VzOiB7fSwgdHlwZXM6IHt9IH07XG4gICAgaWYgKHJlcXVlc3RzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHJlc3VsdHM7XG4gICAgY29uc3QgZ3FsUXVlcnkgPSBge1xuICAgICAgICAke3JlcXVlc3RzLm1hcCgocmVxKSA9PiB7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gcmVxLnR5cGUgPT09IFwicGFja2FnZVwiID8gXCJwYWNrYWdlQnlOYW1lXCIgOiBcInR5cGVCeU5hbWVcIjtcbiAgICAgIGNvbnN0IGZpZWxkcyA9IHJlcS50eXBlID09PSBcInBhY2thZ2VcIiA/IFwiYWRkcmVzc1wiIDogXCJyZXByXCI7XG4gICAgICByZXR1cm4gYCR7Z3FsUXVlcnlLZXkocmVxLmlkKX06ICR7cmVxdWVzdH0obmFtZTpcIiR7cmVxLm5hbWV9XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgJHtmaWVsZHN9XG4gICAgICAgICAgICAgICAgfWA7XG4gICAgfSl9XG4gICAgfWA7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2xpZW50LnF1ZXJ5KHtcbiAgICAgIHF1ZXJ5OiBncWxRdWVyeSxcbiAgICAgIHZhcmlhYmxlczogdm9pZCAwXG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcnMpIHRocm93IG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeSh7IHF1ZXJ5OiBncWxRdWVyeSwgZXJyb3JzOiByZXN1bHQuZXJyb3JzIH0pKTtcbiAgICBmb3IgKGNvbnN0IHJlcSBvZiByZXF1ZXN0cykge1xuICAgICAgY29uc3Qga2V5ID0gZ3FsUXVlcnlLZXkocmVxLmlkKTtcbiAgICAgIGlmICghcmVzdWx0LmRhdGEgfHwgIXJlc3VsdC5kYXRhW2tleV0pIHRocm93IG5ldyBFcnJvcihgTm8gcmVzdWx0IGZvdW5kIGZvcjogJHtyZXEubmFtZX1gKTtcbiAgICAgIGNvbnN0IGRhdGEgPSByZXN1bHQuZGF0YVtrZXldO1xuICAgICAgaWYgKHJlcS50eXBlID09PSBcInBhY2thZ2VcIikgcmVzdWx0cy5wYWNrYWdlc1tyZXEubmFtZV0gPSBkYXRhLmFkZHJlc3M7XG4gICAgICBpZiAocmVxLnR5cGUgPT09IFwibW92ZVR5cGVcIikgcmVzdWx0cy50eXBlc1tyZXEubmFtZV0gPSBkYXRhLnJlcHI7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG59O1xuY29uc3QgZ3FsUXVlcnlLZXkgPSAoaWR4KSA9PiBga2V5XyR7aWR4fWA7XG5leHBvcnQge1xuICBuYW1lZFBhY2thZ2VzUGx1Z2luXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmFtZWRQYWNrYWdlc1BsdWdpbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJmaW5kVHJhbnNhY3Rpb25CbG9ja05hbWVzIiwibGlzdFRvUmVxdWVzdHMiLCJyZXBsYWNlTmFtZXMiLCJuYW1lZFBhY2thZ2VzUGx1Z2luIiwic3VpR3JhcGhRTENsaWVudCIsInBhZ2VTaXplIiwib3ZlcnJpZGVzIiwicGFja2FnZXMiLCJ0eXBlcyIsImNhY2hlIiwidHJhbnNhY3Rpb25EYXRhIiwiX2J1aWxkT3B0aW9ucyIsIm5leHQiLCJuYW1lcyIsImJhdGNoZXMiLCJmaWx0ZXIiLCJ4IiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsImJhdGNoIiwicXVlcnkiLCJmb3JFYWNoIiwicmVzIiwiT2JqZWN0IiwiYXNzaWduIiwiY2xpZW50IiwicmVxdWVzdHMiLCJyZXN1bHRzIiwibGVuZ3RoIiwiZ3FsUXVlcnkiLCJyZXEiLCJyZXF1ZXN0IiwidHlwZSIsImZpZWxkcyIsImdxbFF1ZXJ5S2V5IiwiaWQiLCJuYW1lIiwicmVzdWx0IiwidmFyaWFibGVzIiwiZXJyb3JzIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5Iiwia2V5IiwiZGF0YSIsImFkZHJlc3MiLCJyZXByIiwiaWR4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/plugins/NamedPackagesPlugin.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/plugins/utils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@mysten/sui/dist/esm/transactions/plugins/utils.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findTransactionBlockNames: function() { return /* binding */ findTransactionBlockNames; },\n/* harmony export */   listToRequests: function() { return /* binding */ listToRequests; },\n/* harmony export */   replaceNames: function() { return /* binding */ replaceNames; }\n/* harmony export */ });\n/* harmony import */ var _utils_move_registry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/move-registry.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/utils/move-registry.js\");\n\nconst NAME_SEPARATOR = \"/\";\nconst findTransactionBlockNames = (builder)=>{\n    const packages = /* @__PURE__ */ new Set();\n    const types = /* @__PURE__ */ new Set();\n    for (const command of builder.commands){\n        var _command_MakeMoveVec;\n        if ((_command_MakeMoveVec = command.MakeMoveVec) === null || _command_MakeMoveVec === void 0 ? void 0 : _command_MakeMoveVec.type) {\n            getNamesFromTypeList([\n                command.MakeMoveVec.type\n            ]).forEach((type)=>{\n                types.add(type);\n            });\n            continue;\n        }\n        if (!(\"MoveCall\" in command)) continue;\n        const tx = command.MoveCall;\n        if (!tx) continue;\n        const pkg = tx.package.split(\"::\")[0];\n        if (pkg.includes(NAME_SEPARATOR)) {\n            if (!(0,_utils_move_registry_js__WEBPACK_IMPORTED_MODULE_0__.isValidNamedPackage)(pkg)) throw new Error(\"Invalid package name: \".concat(pkg));\n            packages.add(pkg);\n        }\n        var _tx_typeArguments;\n        getNamesFromTypeList((_tx_typeArguments = tx.typeArguments) !== null && _tx_typeArguments !== void 0 ? _tx_typeArguments : []).forEach((type)=>{\n            types.add(type);\n        });\n    }\n    return {\n        packages: [\n            ...packages\n        ],\n        types: [\n            ...types\n        ]\n    };\n};\nfunction getNamesFromTypeList(types) {\n    const names = /* @__PURE__ */ new Set();\n    for (const type of types){\n        if (type.includes(NAME_SEPARATOR)) {\n            if (!(0,_utils_move_registry_js__WEBPACK_IMPORTED_MODULE_0__.isValidNamedType)(type)) throw new Error(\"Invalid type with names: \".concat(type));\n            names.add(type);\n        }\n    }\n    return [\n        ...names\n    ];\n}\nconst replaceNames = (builder, cache)=>{\n    for (const command of builder.commands){\n        var _command_MakeMoveVec;\n        if ((_command_MakeMoveVec = command.MakeMoveVec) === null || _command_MakeMoveVec === void 0 ? void 0 : _command_MakeMoveVec.type) {\n            if (!command.MakeMoveVec.type.includes(NAME_SEPARATOR)) continue;\n            if (!cache.types[command.MakeMoveVec.type]) throw new Error(\"No resolution found for type: \".concat(command.MakeMoveVec.type));\n            command.MakeMoveVec.type = cache.types[command.MakeMoveVec.type];\n        }\n        const tx = command.MoveCall;\n        if (!tx) continue;\n        const nameParts = tx.package.split(\"::\");\n        const name = nameParts[0];\n        if (name.includes(NAME_SEPARATOR) && !cache.packages[name]) throw new Error(\"No address found for package: \".concat(name));\n        if (name.includes(NAME_SEPARATOR)) {\n            nameParts[0] = cache.packages[name];\n            tx.package = nameParts.join(\"::\");\n        }\n        const types = tx.typeArguments;\n        if (!types) continue;\n        for(let i = 0; i < types.length; i++){\n            if (!types[i].includes(NAME_SEPARATOR)) continue;\n            if (!cache.types[types[i]]) throw new Error(\"No resolution found for type: \".concat(types[i]));\n            types[i] = cache.types[types[i]];\n        }\n        tx.typeArguments = types;\n    }\n};\nconst listToRequests = (names, batchSize)=>{\n    const results = [];\n    const uniqueNames = deduplicate(names.packages);\n    const uniqueTypes = deduplicate(names.types);\n    for (const [idx, name] of uniqueNames.entries()){\n        results.push({\n            id: idx,\n            type: \"package\",\n            name\n        });\n    }\n    for (const [idx, type] of uniqueTypes.entries()){\n        results.push({\n            id: idx + uniqueNames.length,\n            type: \"moveType\",\n            name: type\n        });\n    }\n    return batch(results, batchSize);\n};\nconst deduplicate = (arr)=>[\n        ...new Set(arr)\n    ];\nconst batch = (arr, size)=>{\n    const batches = [];\n    for(let i = 0; i < arr.length; i += size){\n        batches.push(arr.slice(i, i + size));\n    }\n    return batches;\n};\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/plugins/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/utils/move-registry.js":
/*!******************************************************************!*\
  !*** ./node_modules/@mysten/sui/dist/esm/utils/move-registry.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidNamedPackage: function() { return /* binding */ isValidNamedPackage; },\n/* harmony export */   isValidNamedType: function() { return /* binding */ isValidNamedType; }\n/* harmony export */ });\n/* harmony import */ var _suins_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./suins.js */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/utils/suins.js\");\n\nconst NAME_PATTERN = /^([a-z0-9]+(?:-[a-z0-9]+)*)$/;\nconst VERSION_REGEX = /^\\d+$/;\nconst MAX_APP_SIZE = 64;\nconst NAME_SEPARATOR = \"/\";\nconst isValidNamedPackage = (name)=>{\n    const parts = name.split(NAME_SEPARATOR);\n    if (parts.length < 2 || parts.length > 3) return false;\n    const [org, app, version] = parts;\n    if (version !== void 0 && !VERSION_REGEX.test(version)) return false;\n    if (!(0,_suins_js__WEBPACK_IMPORTED_MODULE_0__.isValidSuiNSName)(org)) return false;\n    return NAME_PATTERN.test(app) && app.length < MAX_APP_SIZE;\n};\nconst isValidNamedType = (type)=>{\n    const splitType = type.split(/::|<|>|,/);\n    for (const t of splitType){\n        if (t.includes(NAME_SEPARATOR) && !isValidNamedPackage(t)) return false;\n    }\n    return true;\n};\n //# sourceMappingURL=move-registry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbXlzdGVuL3N1aS9kaXN0L2VzbS91dGlscy9tb3ZlLXJlZ2lzdHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUM5QyxNQUFNQyxlQUFlO0FBQ3JCLE1BQU1DLGdCQUFnQjtBQUN0QixNQUFNQyxlQUFlO0FBQ3JCLE1BQU1DLGlCQUFpQjtBQUN2QixNQUFNQyxzQkFBc0IsQ0FBQ0M7SUFDM0IsTUFBTUMsUUFBUUQsS0FBS0UsS0FBSyxDQUFDSjtJQUN6QixJQUFJRyxNQUFNRSxNQUFNLEdBQUcsS0FBS0YsTUFBTUUsTUFBTSxHQUFHLEdBQUcsT0FBTztJQUNqRCxNQUFNLENBQUNDLEtBQUtDLEtBQUtDLFFBQVEsR0FBR0w7SUFDNUIsSUFBSUssWUFBWSxLQUFLLEtBQUssQ0FBQ1YsY0FBY1csSUFBSSxDQUFDRCxVQUFVLE9BQU87SUFDL0QsSUFBSSxDQUFDWiwyREFBZ0JBLENBQUNVLE1BQU0sT0FBTztJQUNuQyxPQUFPVCxhQUFhWSxJQUFJLENBQUNGLFFBQVFBLElBQUlGLE1BQU0sR0FBR047QUFDaEQ7QUFDQSxNQUFNVyxtQkFBbUIsQ0FBQ0M7SUFDeEIsTUFBTUMsWUFBWUQsS0FBS1AsS0FBSyxDQUFDO0lBQzdCLEtBQUssTUFBTVMsS0FBS0QsVUFBVztRQUN6QixJQUFJQyxFQUFFQyxRQUFRLENBQUNkLG1CQUFtQixDQUFDQyxvQkFBb0JZLElBQUksT0FBTztJQUNwRTtJQUNBLE9BQU87QUFDVDtBQUlFLENBQ0YseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbXlzdGVuL3N1aS9kaXN0L2VzbS91dGlscy9tb3ZlLXJlZ2lzdHJ5LmpzPzJmMDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNWYWxpZFN1aU5TTmFtZSB9IGZyb20gXCIuL3N1aW5zLmpzXCI7XG5jb25zdCBOQU1FX1BBVFRFUk4gPSAvXihbYS16MC05XSsoPzotW2EtejAtOV0rKSopJC87XG5jb25zdCBWRVJTSU9OX1JFR0VYID0gL15cXGQrJC87XG5jb25zdCBNQVhfQVBQX1NJWkUgPSA2NDtcbmNvbnN0IE5BTUVfU0VQQVJBVE9SID0gXCIvXCI7XG5jb25zdCBpc1ZhbGlkTmFtZWRQYWNrYWdlID0gKG5hbWUpID0+IHtcbiAgY29uc3QgcGFydHMgPSBuYW1lLnNwbGl0KE5BTUVfU0VQQVJBVE9SKTtcbiAgaWYgKHBhcnRzLmxlbmd0aCA8IDIgfHwgcGFydHMubGVuZ3RoID4gMykgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBbb3JnLCBhcHAsIHZlcnNpb25dID0gcGFydHM7XG4gIGlmICh2ZXJzaW9uICE9PSB2b2lkIDAgJiYgIVZFUlNJT05fUkVHRVgudGVzdCh2ZXJzaW9uKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWlzVmFsaWRTdWlOU05hbWUob3JnKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gTkFNRV9QQVRURVJOLnRlc3QoYXBwKSAmJiBhcHAubGVuZ3RoIDwgTUFYX0FQUF9TSVpFO1xufTtcbmNvbnN0IGlzVmFsaWROYW1lZFR5cGUgPSAodHlwZSkgPT4ge1xuICBjb25zdCBzcGxpdFR5cGUgPSB0eXBlLnNwbGl0KC86Onw8fD58LC8pO1xuICBmb3IgKGNvbnN0IHQgb2Ygc3BsaXRUeXBlKSB7XG4gICAgaWYgKHQuaW5jbHVkZXMoTkFNRV9TRVBBUkFUT1IpICYmICFpc1ZhbGlkTmFtZWRQYWNrYWdlKHQpKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuZXhwb3J0IHtcbiAgaXNWYWxpZE5hbWVkUGFja2FnZSxcbiAgaXNWYWxpZE5hbWVkVHlwZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vdmUtcmVnaXN0cnkuanMubWFwXG4iXSwibmFtZXMiOlsiaXNWYWxpZFN1aU5TTmFtZSIsIk5BTUVfUEFUVEVSTiIsIlZFUlNJT05fUkVHRVgiLCJNQVhfQVBQX1NJWkUiLCJOQU1FX1NFUEFSQVRPUiIsImlzVmFsaWROYW1lZFBhY2thZ2UiLCJuYW1lIiwicGFydHMiLCJzcGxpdCIsImxlbmd0aCIsIm9yZyIsImFwcCIsInZlcnNpb24iLCJ0ZXN0IiwiaXNWYWxpZE5hbWVkVHlwZSIsInR5cGUiLCJzcGxpdFR5cGUiLCJ0IiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/utils/move-registry.js\n"));

/***/ })

});