"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/sui.ts":
/*!************************!*\
  !*** ./src/lib/sui.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SuiWrapper: function() { return /* binding */ SuiWrapper; }\n/* harmony export */ });\n/* harmony import */ var _mysten_sui_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mysten/sui/client */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/client/client.js\");\n/* harmony import */ var _mysten_sui_transactions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @mysten/sui/transactions */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/Transaction.js\");\n/* harmony import */ var _config_network__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/network */ \"(app-pages-browser)/./src/config/network.ts\");\n\n\n\nlet instance = null;\nclass SuiWrapper {\n    static getInstance() {\n        if (!instance) {\n            instance = new SuiWrapper();\n        }\n        return instance;\n    }\n    configureTransaction(tx, sender) {\n        tx.setSender(sender);\n        tx.setGasBudget(50000000);\n        return tx;\n    }\n    async createStakeTransaction(walletAddress, amount) {\n        const tx = this.configureTransaction(new _mysten_sui_transactions__WEBPACK_IMPORTED_MODULE_1__.Transaction(), walletAddress);\n        try {\n            // Get all coins and calculate total balance\n            const coins = await this.provider.getCoins({\n                owner: walletAddress,\n                coinType: \"0x2::sui::SUI\"\n            });\n            if (coins.data.length === 0) {\n                throw new Error(\"No SUI coins found in wallet\");\n            }\n            const totalBalance = coins.data.reduce((acc, coin)=>acc + BigInt(coin.balance), BigInt(0));\n            const gasEstimate = BigInt(50000000); // Gas estimate in MIST\n            if (totalBalance < amount + gasEstimate) {\n                throw new Error(\"Insufficient balance. Need \".concat(amount + gasEstimate, \" MIST but only have \").concat(totalBalance, \" MIST (including gas)\"));\n            }\n            // Create a stake transaction\n            const [stakingCoin] = tx.splitCoins(tx.gas, [\n                tx.pure.u64(Number(amount))\n            ]);\n            tx.moveCall({\n                target: \"\".concat(this.PACKAGE_ID, \"::suisound::stake\"),\n                arguments: [\n                    tx.object(this.TREASURY_ID),\n                    stakingCoin,\n                    tx.pure.u64(Number(amount))\n                ]\n            });\n            return tx;\n        } catch (error) {\n            console.error(\"Error creating stake transaction:\", error);\n            throw error;\n        }\n    }\n    async getProducerAccess(walletAddress) {\n        try {\n            const stakeInfo = await this.getStakeInfo(walletAddress);\n            return stakeInfo.stakeAmount >= BigInt(1000000000);\n        } catch (error) {\n            return false;\n        }\n    }\n    async getStakeInfo(walletAddress) {\n        try {\n            var _treasuryObj_data, _stakeObj_data, _stakeContent_fields_value, _stakeContent_fields;\n            console.log(\"Fetching stake info for wallet:\", walletAddress);\n            const treasuryObj = await this.provider.getObject({\n                id: this.TREASURY_ID,\n                options: {\n                    showContent: true,\n                    showDisplay: true\n                }\n            });\n            console.log(\"Treasury object:\", JSON.stringify(treasuryObj, null, 2));\n            if (!((_treasuryObj_data = treasuryObj.data) === null || _treasuryObj_data === void 0 ? void 0 : _treasuryObj_data.content)) {\n                console.log(\"No treasury content found\");\n                return {\n                    stakeAmount: BigInt(0),\n                    isProStaker: false,\n                    rewards: BigInt(0)\n                };\n            }\n            const treasuryFields = treasuryObj.data.content.fields;\n            const stakesTableId = treasuryFields.stakes.fields.id.id;\n            console.log(\"Stakes table ID:\", stakesTableId);\n            const allStakes = await this.provider.getDynamicFields({\n                parentId: stakesTableId\n            });\n            console.log(\"All stakes:\", JSON.stringify(allStakes, null, 2));\n            const stake = allStakes.data.find((field)=>{\n                var _field_name;\n                const nameValue = (_field_name = field.name) === null || _field_name === void 0 ? void 0 : _field_name.value;\n                return (nameValue === null || nameValue === void 0 ? void 0 : nameValue.toLowerCase()) === walletAddress.toLowerCase();\n            });\n            console.log(\"Found stake for wallet:\", stake);\n            if (!stake) {\n                console.log(\"No stake found for wallet\");\n                return {\n                    stakeAmount: BigInt(0),\n                    isProStaker: false,\n                    rewards: BigInt(0)\n                };\n            }\n            // Get the stake object details\n            const stakeObj = await this.provider.getObject({\n                id: stake.objectId,\n                options: {\n                    showContent: true\n                }\n            });\n            console.log(\"Stake object:\", JSON.stringify(stakeObj, null, 2));\n            // Access the stake fields correctly through the dynamic field value\n            const stakeContent = (_stakeObj_data = stakeObj.data) === null || _stakeObj_data === void 0 ? void 0 : _stakeObj_data.content;\n            const stakeFields = stakeContent === null || stakeContent === void 0 ? void 0 : (_stakeContent_fields = stakeContent.fields) === null || _stakeContent_fields === void 0 ? void 0 : (_stakeContent_fields_value = _stakeContent_fields.value) === null || _stakeContent_fields_value === void 0 ? void 0 : _stakeContent_fields_value.fields;\n            console.log(\"Stake fields:\", stakeFields);\n            if (!stakeFields) {\n                return {\n                    stakeAmount: BigInt(0),\n                    isProStaker: false,\n                    rewards: BigInt(0)\n                };\n            }\n            return {\n                stakeAmount: BigInt(stakeFields.amount || 0),\n                isProStaker: Boolean(stakeFields.is_pro || false),\n                rewards: BigInt(0) // We'll calculate this based on time difference later\n            };\n        } catch (error) {\n            console.error(\"Error fetching stake info:\", error);\n            return {\n                stakeAmount: BigInt(0),\n                isProStaker: false,\n                rewards: BigInt(0)\n            };\n        }\n    }\n    async createUnstakeTransaction(walletAddress) {\n        const tx = this.configureTransaction(new _mysten_sui_transactions__WEBPACK_IMPORTED_MODULE_1__.Transaction(), walletAddress);\n        try {\n            var _treasuryObj_data, _stakeContent_fields;\n            // First, get the user's stake info to find their stake object\n            console.log(\"Getting stake info for wallet:\", walletAddress);\n            const treasuryObj = await this.provider.getObject({\n                id: this.TREASURY_ID,\n                options: {\n                    showContent: true,\n                    showOwner: true\n                }\n            });\n            if (!((_treasuryObj_data = treasuryObj.data) === null || _treasuryObj_data === void 0 ? void 0 : _treasuryObj_data.content)) {\n                throw new Error(\"Treasury object not found\");\n            }\n            console.log(\"Treasury object owner:\", treasuryObj.data.owner);\n            const treasuryFields = treasuryObj.data.content.fields;\n            const stakesTableId = treasuryFields.stakes.fields.id.id;\n            console.log(\"Stakes table ID:\", stakesTableId);\n            const allStakes = await this.provider.getDynamicFields({\n                parentId: stakesTableId\n            });\n            const stake = allStakes.data.find((field)=>{\n                var _field_name;\n                const nameValue = (_field_name = field.name) === null || _field_name === void 0 ? void 0 : _field_name.value;\n                return (nameValue === null || nameValue === void 0 ? void 0 : nameValue.toLowerCase()) === walletAddress.toLowerCase();\n            });\n            if (!stake) {\n                throw new Error(\"No active stake found for this wallet\");\n            }\n            // Get the stake object details with owner info\n            const stakeObj = await this.provider.getObject({\n                id: stake.objectId,\n                options: {\n                    showContent: true,\n                    showOwner: true\n                }\n            });\n            if (!stakeObj.data) {\n                throw new Error(\"Could not fetch stake object details\");\n            }\n            console.log(\"Stake object:\", JSON.stringify(stakeObj.data, null, 2));\n            console.log(\"Stake owner:\", stakeObj.data.owner);\n            // Get the stake value fields\n            const stakeContent = stakeObj.data.content;\n            if (!(stakeContent === null || stakeContent === void 0 ? void 0 : (_stakeContent_fields = stakeContent.fields) === null || _stakeContent_fields === void 0 ? void 0 : _stakeContent_fields.value)) {\n                throw new Error(\"Could not find stake value\");\n            }\n            // Get the dynamic field ID which contains the stake\n            const stakeId = stakeContent.fields.id.id;\n            if (!stakeId) {\n                throw new Error(\"Could not find stake ID\");\n            }\n            console.log(\"Using stake ID:\", stakeId);\n            // Set a higher gas budget for the unstake operation\n            tx.setGasBudget(100000000);\n            // Create the unstake transaction with the stake table ID and stake ID\n            tx.moveCall({\n                target: \"\".concat(this.PACKAGE_ID, \"::suisound::unstake\"),\n                arguments: [\n                    tx.object(this.TREASURY_ID),\n                    tx.object(stakesTableId),\n                    tx.pure.address(walletAddress) // Pass the wallet address\n                ],\n                typeArguments: []\n            });\n            return tx;\n        } catch (error) {\n            console.error(\"Error creating unstake transaction:\", error);\n            if (error instanceof Error) {\n                console.error(\"Error details:\", {\n                    message: error.message,\n                    stack: error.stack\n                });\n            }\n            throw error;\n        }\n    }\n    async createClaimRewardsTransaction(walletAddress) {\n        const tx = this.configureTransaction(new _mysten_sui_transactions__WEBPACK_IMPORTED_MODULE_1__.Transaction(), walletAddress);\n        try {\n            tx.moveCall({\n                target: \"\".concat(this.PACKAGE_ID, \"::suisound::claim_rewards\"),\n                arguments: [\n                    tx.object(this.TREASURY_ID)\n                ]\n            });\n            return tx;\n        } catch (error) {\n            console.error(\"Error creating claim rewards transaction:\", error);\n            throw error;\n        }\n    }\n    constructor(){\n        this.provider = new _mysten_sui_client__WEBPACK_IMPORTED_MODULE_2__.SuiClient({\n            url: _config_network__WEBPACK_IMPORTED_MODULE_0__.NETWORK_URLS[_config_network__WEBPACK_IMPORTED_MODULE_0__.NETWORK]\n        });\n        this.PACKAGE_ID = _config_network__WEBPACK_IMPORTED_MODULE_0__.PACKAGE_ID;\n        this.TREASURY_ID = _config_network__WEBPACK_IMPORTED_MODULE_0__.TREASURY_ID;\n        console.log(\"Network:\", _config_network__WEBPACK_IMPORTED_MODULE_0__.NETWORK);\n        console.log(\"Package ID:\", this.PACKAGE_ID);\n        console.log(\"Treasury ID:\", this.TREASURY_ID);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/sui.ts\n"));

/***/ })

});